// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package market

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketABI is the input ABI used to generate the binding from.
const MarketABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_faasLevelID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"BiddingEndEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isViolatedSLA\",\"type\":\"bool\"}],\"name\":\"FinishDeploymentOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"funcPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"deployPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"accessKey\",\"type\":\"string\"}],\"name\":\"NewDeploymentInfoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_faasLevelID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_faasDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_biddingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_publicKey\",\"type\":\"string\"}],\"name\":\"NewDeploymentOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"NewLeaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"NewSLAEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_core\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mem\",\"type\":\"uint256\"}],\"name\":\"addFaaSLevelEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_core\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mem\",\"type\":\"uint256\"}],\"name\":\"addFaaSLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faasDuration\",\"type\":\"uint256\"}],\"name\":\"calculateLockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faasDuration\",\"type\":\"uint256\"}],\"name\":\"calculateServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_fulfillKey\",\"type\":\"bytes32\"}],\"name\":\"confirmDeploymentInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"finishDeploymemtOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_fulfillSecretKey\",\"type\":\"bytes32\"}],\"name\":\"fulfillDeploymentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"getDeploymentOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_faasLevelID\",\"type\":\"uint256\"}],\"name\":\"getFaaSLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStdProviderDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProviderQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProviderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"matchDeploymentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faasLevelID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faasDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_biddingDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_publicKey\",\"type\":\"string\"}],\"name\":\"newDeploymentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numFaaSLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerLogin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerLogout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_funcPath\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_deployPath\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_accessKey\",\"type\":\"string\"}],\"name\":\"publishDeploymentInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"queryLease\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"queryMatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contractFaaSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wpContract\",\"outputs\":[{\"internalType\":\"contractWitnessPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MarketBin is the compiled bytecode used for deploying new contracts.
var MarketBin = ""

// DeployMarket deploys a new Ethereum contract, binding an instance of Market to it.
func DeployMarket(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenContractAddress common.Address) (common.Address, *types.Transaction, *Market, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketBin), backend, _tokenContractAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// Market is an auto generated Go binding around an Ethereum contract.
type Market struct {
	MarketCaller     // Read-only binding to the contract
	MarketTransactor // Write-only binding to the contract
	MarketFilterer   // Log filterer for contract events
}

// MarketCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketSession struct {
	Contract     *Market           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketCallerSession struct {
	Contract *MarketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MarketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketTransactorSession struct {
	Contract     *MarketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketRaw struct {
	Contract *Market // Generic contract binding to access the raw methods on
}

// MarketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketCallerRaw struct {
	Contract *MarketCaller // Generic read-only contract binding to access the raw methods on
}

// MarketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketTransactorRaw struct {
	Contract *MarketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarket creates a new instance of Market, bound to a specific deployed contract.
func NewMarket(address common.Address, backend bind.ContractBackend) (*Market, error) {
	contract, err := bindMarket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// NewMarketCaller creates a new read-only instance of Market, bound to a specific deployed contract.
func NewMarketCaller(address common.Address, caller bind.ContractCaller) (*MarketCaller, error) {
	contract, err := bindMarket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketCaller{contract: contract}, nil
}

// NewMarketTransactor creates a new write-only instance of Market, bound to a specific deployed contract.
func NewMarketTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketTransactor, error) {
	contract, err := bindMarket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketTransactor{contract: contract}, nil
}

// NewMarketFilterer creates a new log filterer instance of Market, bound to a specific deployed contract.
func NewMarketFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketFilterer, error) {
	contract, err := bindMarket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketFilterer{contract: contract}, nil
}

// bindMarket binds a generic wrapper to an already deployed contract.
func bindMarket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.MarketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.contract.Transact(opts, method, params...)
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketCaller) CalculateLockFee(opts *bind.CallOpts, _highestUnitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "calculateLockFee", _highestUnitPrice, _faasDuration)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketSession) CalculateLockFee(_highestUnitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateLockFee(&_Market.CallOpts, _highestUnitPrice, _faasDuration)
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketCallerSession) CalculateLockFee(_highestUnitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateLockFee(&_Market.CallOpts, _highestUnitPrice, _faasDuration)
}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketCaller) CalculateServiceFee(opts *bind.CallOpts, _unitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "calculateServiceFee", _unitPrice, _faasDuration)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketSession) CalculateServiceFee(_unitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateServiceFee(&_Market.CallOpts, _unitPrice, _faasDuration)
}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketCallerSession) CalculateServiceFee(_unitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateServiceFee(&_Market.CallOpts, _unitPrice, _faasDuration)
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) view returns(address, uint256, uint256, uint256)
func (_Market *MarketCaller) GetDeploymentOrder(opts *bind.CallOpts, _deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getDeploymentOrder", _deploymentOrderID)

	if err != nil {
		return *new(common.Address), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) view returns(address, uint256, uint256, uint256)
func (_Market *MarketSession) GetDeploymentOrder(_deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	return _Market.Contract.GetDeploymentOrder(&_Market.CallOpts, _deploymentOrderID)
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) view returns(address, uint256, uint256, uint256)
func (_Market *MarketCallerSession) GetDeploymentOrder(_deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	return _Market.Contract.GetDeploymentOrder(&_Market.CallOpts, _deploymentOrderID)
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _faasLevelID) view returns(uint256, uint256)
func (_Market *MarketCaller) GetFaaSLevel(opts *bind.CallOpts, _faasLevelID *big.Int) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getFaaSLevel", _faasLevelID)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _faasLevelID) view returns(uint256, uint256)
func (_Market *MarketSession) GetFaaSLevel(_faasLevelID *big.Int) (*big.Int, *big.Int, error) {
	return _Market.Contract.GetFaaSLevel(&_Market.CallOpts, _faasLevelID)
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _faasLevelID) view returns(uint256, uint256)
func (_Market *MarketCallerSession) GetFaaSLevel(_faasLevelID *big.Int) (*big.Int, *big.Int, error) {
	return _Market.Contract.GetFaaSLevel(&_Market.CallOpts, _faasLevelID)
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) view returns(uint256)
func (_Market *MarketCaller) GetProviderDeposit(opts *bind.CallOpts, _provider common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getProviderDeposit", _provider)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) view returns(uint256)
func (_Market *MarketSession) GetProviderDeposit(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderDeposit(&_Market.CallOpts, _provider)
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) view returns(uint256)
func (_Market *MarketCallerSession) GetProviderDeposit(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderDeposit(&_Market.CallOpts, _provider)
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) view returns(uint256)
func (_Market *MarketCaller) GetProviderReputation(opts *bind.CallOpts, _provider common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getProviderReputation", _provider)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) view returns(uint256)
func (_Market *MarketSession) GetProviderReputation(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderReputation(&_Market.CallOpts, _provider)
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) view returns(uint256)
func (_Market *MarketCallerSession) GetProviderReputation(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderReputation(&_Market.CallOpts, _provider)
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() view returns(uint256)
func (_Market *MarketCaller) GetStdProviderDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getStdProviderDeposit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() view returns(uint256)
func (_Market *MarketSession) GetStdProviderDeposit() (*big.Int, error) {
	return _Market.Contract.GetStdProviderDeposit(&_Market.CallOpts)
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() view returns(uint256)
func (_Market *MarketCallerSession) GetStdProviderDeposit() (*big.Int, error) {
	return _Market.Contract.GetStdProviderDeposit(&_Market.CallOpts)
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) view returns(bool)
func (_Market *MarketCaller) IsProviderQualified(opts *bind.CallOpts, _provider common.Address) (bool, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "isProviderQualified", _provider)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) view returns(bool)
func (_Market *MarketSession) IsProviderQualified(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderQualified(&_Market.CallOpts, _provider)
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) view returns(bool)
func (_Market *MarketCallerSession) IsProviderQualified(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderQualified(&_Market.CallOpts, _provider)
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) view returns(bool)
func (_Market *MarketCaller) IsProviderRegistered(opts *bind.CallOpts, _provider common.Address) (bool, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "isProviderRegistered", _provider)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) view returns(bool)
func (_Market *MarketSession) IsProviderRegistered(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderRegistered(&_Market.CallOpts, _provider)
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) view returns(bool)
func (_Market *MarketCallerSession) IsProviderRegistered(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderRegistered(&_Market.CallOpts, _provider)
}

// NumFaaSLevel is a free data retrieval call binding the contract method 0x9a599201.
//
// Solidity: function numFaaSLevel() view returns(uint256)
func (_Market *MarketCaller) NumFaaSLevel(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "numFaaSLevel")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumFaaSLevel is a free data retrieval call binding the contract method 0x9a599201.
//
// Solidity: function numFaaSLevel() view returns(uint256)
func (_Market *MarketSession) NumFaaSLevel() (*big.Int, error) {
	return _Market.Contract.NumFaaSLevel(&_Market.CallOpts)
}

// NumFaaSLevel is a free data retrieval call binding the contract method 0x9a599201.
//
// Solidity: function numFaaSLevel() view returns(uint256)
func (_Market *MarketCallerSession) NumFaaSLevel() (*big.Int, error) {
	return _Market.Contract.NumFaaSLevel(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketCallerSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// QueryLease is a free data retrieval call binding the contract method 0x65d31c38.
//
// Solidity: function queryLease(uint256 _deploymentOrderID) view returns(address, address)
func (_Market *MarketCaller) QueryLease(opts *bind.CallOpts, _deploymentOrderID *big.Int) (common.Address, common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "queryLease", _deploymentOrderID)

	if err != nil {
		return *new(common.Address), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return out0, out1, err

}

// QueryLease is a free data retrieval call binding the contract method 0x65d31c38.
//
// Solidity: function queryLease(uint256 _deploymentOrderID) view returns(address, address)
func (_Market *MarketSession) QueryLease(_deploymentOrderID *big.Int) (common.Address, common.Address, error) {
	return _Market.Contract.QueryLease(&_Market.CallOpts, _deploymentOrderID)
}

// QueryLease is a free data retrieval call binding the contract method 0x65d31c38.
//
// Solidity: function queryLease(uint256 _deploymentOrderID) view returns(address, address)
func (_Market *MarketCallerSession) QueryLease(_deploymentOrderID *big.Int) (common.Address, common.Address, error) {
	return _Market.Contract.QueryLease(&_Market.CallOpts, _deploymentOrderID)
}

// QueryMatch is a free data retrieval call binding the contract method 0x1b5360cd.
//
// Solidity: function queryMatch(uint256 _deploymentOrderID) view returns(bool)
func (_Market *MarketCaller) QueryMatch(opts *bind.CallOpts, _deploymentOrderID *big.Int) (bool, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "queryMatch", _deploymentOrderID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// QueryMatch is a free data retrieval call binding the contract method 0x1b5360cd.
//
// Solidity: function queryMatch(uint256 _deploymentOrderID) view returns(bool)
func (_Market *MarketSession) QueryMatch(_deploymentOrderID *big.Int) (bool, error) {
	return _Market.Contract.QueryMatch(&_Market.CallOpts, _deploymentOrderID)
}

// QueryMatch is a free data retrieval call binding the contract method 0x1b5360cd.
//
// Solidity: function queryMatch(uint256 _deploymentOrderID) view returns(bool)
func (_Market *MarketCallerSession) QueryMatch(_deploymentOrderID *big.Int) (bool, error) {
	return _Market.Contract.QueryMatch(&_Market.CallOpts, _deploymentOrderID)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_Market *MarketCaller) TokenContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "tokenContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_Market *MarketSession) TokenContract() (common.Address, error) {
	return _Market.Contract.TokenContract(&_Market.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_Market *MarketCallerSession) TokenContract() (common.Address, error) {
	return _Market.Contract.TokenContract(&_Market.CallOpts)
}

// WpContract is a free data retrieval call binding the contract method 0xacd3dce3.
//
// Solidity: function wpContract() view returns(address)
func (_Market *MarketCaller) WpContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "wpContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WpContract is a free data retrieval call binding the contract method 0xacd3dce3.
//
// Solidity: function wpContract() view returns(address)
func (_Market *MarketSession) WpContract() (common.Address, error) {
	return _Market.Contract.WpContract(&_Market.CallOpts)
}

// WpContract is a free data retrieval call binding the contract method 0xacd3dce3.
//
// Solidity: function wpContract() view returns(address)
func (_Market *MarketCallerSession) WpContract() (common.Address, error) {
	return _Market.Contract.WpContract(&_Market.CallOpts)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns()
func (_Market *MarketTransactor) AddFaaSLevel(opts *bind.TransactOpts, _core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "addFaaSLevel", _core, _mem)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns()
func (_Market *MarketSession) AddFaaSLevel(_core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AddFaaSLevel(&_Market.TransactOpts, _core, _mem)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns()
func (_Market *MarketTransactorSession) AddFaaSLevel(_core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AddFaaSLevel(&_Market.TransactOpts, _core, _mem)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketTransactor) Bid(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "bid", _deploymentOrderID, _unitPrice)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketSession) Bid(_deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.Contract.Bid(&_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketTransactorSession) Bid(_deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.Contract.Bid(&_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

// ConfirmDeploymentInfo is a paid mutator transaction binding the contract method 0xaf500fc2.
//
// Solidity: function confirmDeploymentInfo(uint256 _deploymentOrderID, bytes32 _fulfillKey) returns()
func (_Market *MarketTransactor) ConfirmDeploymentInfo(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _fulfillKey [32]byte) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "confirmDeploymentInfo", _deploymentOrderID, _fulfillKey)
}

// ConfirmDeploymentInfo is a paid mutator transaction binding the contract method 0xaf500fc2.
//
// Solidity: function confirmDeploymentInfo(uint256 _deploymentOrderID, bytes32 _fulfillKey) returns()
func (_Market *MarketSession) ConfirmDeploymentInfo(_deploymentOrderID *big.Int, _fulfillKey [32]byte) (*types.Transaction, error) {
	return _Market.Contract.ConfirmDeploymentInfo(&_Market.TransactOpts, _deploymentOrderID, _fulfillKey)
}

// ConfirmDeploymentInfo is a paid mutator transaction binding the contract method 0xaf500fc2.
//
// Solidity: function confirmDeploymentInfo(uint256 _deploymentOrderID, bytes32 _fulfillKey) returns()
func (_Market *MarketTransactorSession) ConfirmDeploymentInfo(_deploymentOrderID *big.Int, _fulfillKey [32]byte) (*types.Transaction, error) {
	return _Market.Contract.ConfirmDeploymentInfo(&_Market.TransactOpts, _deploymentOrderID, _fulfillKey)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) FinishDeploymemtOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "finishDeploymemtOrder", _deploymentOrderID)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) FinishDeploymemtOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.FinishDeploymemtOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) FinishDeploymemtOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.FinishDeploymemtOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xe82a5d16.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID, bytes32 _fulfillSecretKey) returns()
func (_Market *MarketTransactor) FulfillDeploymentOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _fulfillSecretKey [32]byte) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "fulfillDeploymentOrder", _deploymentOrderID, _fulfillSecretKey)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xe82a5d16.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID, bytes32 _fulfillSecretKey) returns()
func (_Market *MarketSession) FulfillDeploymentOrder(_deploymentOrderID *big.Int, _fulfillSecretKey [32]byte) (*types.Transaction, error) {
	return _Market.Contract.FulfillDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID, _fulfillSecretKey)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xe82a5d16.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID, bytes32 _fulfillSecretKey) returns()
func (_Market *MarketTransactorSession) FulfillDeploymentOrder(_deploymentOrderID *big.Int, _fulfillSecretKey [32]byte) (*types.Transaction, error) {
	return _Market.Contract.FulfillDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID, _fulfillSecretKey)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) MatchDeploymentOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "matchDeploymentOrder", _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) MatchDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.MatchDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) MatchDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.MatchDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0x8f93f86d.
//
// Solidity: function newDeploymentOrder(uint256 _nonce, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration, string _publicKey) returns()
func (_Market *MarketTransactor) NewDeploymentOrder(opts *bind.TransactOpts, _nonce *big.Int, _faasLevelID *big.Int, _highestUnitPrice *big.Int, _faasDuration *big.Int, _biddingDuration *big.Int, _publicKey string) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "newDeploymentOrder", _nonce, _faasLevelID, _highestUnitPrice, _faasDuration, _biddingDuration, _publicKey)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0x8f93f86d.
//
// Solidity: function newDeploymentOrder(uint256 _nonce, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration, string _publicKey) returns()
func (_Market *MarketSession) NewDeploymentOrder(_nonce *big.Int, _faasLevelID *big.Int, _highestUnitPrice *big.Int, _faasDuration *big.Int, _biddingDuration *big.Int, _publicKey string) (*types.Transaction, error) {
	return _Market.Contract.NewDeploymentOrder(&_Market.TransactOpts, _nonce, _faasLevelID, _highestUnitPrice, _faasDuration, _biddingDuration, _publicKey)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0x8f93f86d.
//
// Solidity: function newDeploymentOrder(uint256 _nonce, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration, string _publicKey) returns()
func (_Market *MarketTransactorSession) NewDeploymentOrder(_nonce *big.Int, _faasLevelID *big.Int, _highestUnitPrice *big.Int, _faasDuration *big.Int, _biddingDuration *big.Int, _publicKey string) (*types.Transaction, error) {
	return _Market.Contract.NewDeploymentOrder(&_Market.TransactOpts, _nonce, _faasLevelID, _highestUnitPrice, _faasDuration, _biddingDuration, _publicKey)
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketTransactor) ProviderLogin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "providerLogin")
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketSession) ProviderLogin() (*types.Transaction, error) {
	return _Market.Contract.ProviderLogin(&_Market.TransactOpts)
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketTransactorSession) ProviderLogin() (*types.Transaction, error) {
	return _Market.Contract.ProviderLogin(&_Market.TransactOpts)
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketTransactor) ProviderLogout(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "providerLogout")
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketSession) ProviderLogout() (*types.Transaction, error) {
	return _Market.Contract.ProviderLogout(&_Market.TransactOpts)
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketTransactorSession) ProviderLogout() (*types.Transaction, error) {
	return _Market.Contract.ProviderLogout(&_Market.TransactOpts)
}

// PublishDeploymentInfo is a paid mutator transaction binding the contract method 0x4e2d4837.
//
// Solidity: function publishDeploymentInfo(uint256 _deploymentOrderID, string _funcPath, string _deployPath, string _accessKey) returns()
func (_Market *MarketTransactor) PublishDeploymentInfo(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _funcPath string, _deployPath string, _accessKey string) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "publishDeploymentInfo", _deploymentOrderID, _funcPath, _deployPath, _accessKey)
}

// PublishDeploymentInfo is a paid mutator transaction binding the contract method 0x4e2d4837.
//
// Solidity: function publishDeploymentInfo(uint256 _deploymentOrderID, string _funcPath, string _deployPath, string _accessKey) returns()
func (_Market *MarketSession) PublishDeploymentInfo(_deploymentOrderID *big.Int, _funcPath string, _deployPath string, _accessKey string) (*types.Transaction, error) {
	return _Market.Contract.PublishDeploymentInfo(&_Market.TransactOpts, _deploymentOrderID, _funcPath, _deployPath, _accessKey)
}

// PublishDeploymentInfo is a paid mutator transaction binding the contract method 0x4e2d4837.
//
// Solidity: function publishDeploymentInfo(uint256 _deploymentOrderID, string _funcPath, string _deployPath, string _accessKey) returns()
func (_Market *MarketTransactorSession) PublishDeploymentInfo(_deploymentOrderID *big.Int, _funcPath string, _deployPath string, _accessKey string) (*types.Transaction, error) {
	return _Market.Contract.PublishDeploymentInfo(&_Market.TransactOpts, _deploymentOrderID, _funcPath, _deployPath, _accessKey)
}

// MarketBiddingEndEventIterator is returned from FilterBiddingEndEvent and is used to iterate over the raw logs and unpacked data for BiddingEndEvent events raised by the Market contract.
type MarketBiddingEndEventIterator struct {
	Event *MarketBiddingEndEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketBiddingEndEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketBiddingEndEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketBiddingEndEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketBiddingEndEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketBiddingEndEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketBiddingEndEvent represents a BiddingEndEvent event raised by the Market contract.
type MarketBiddingEndEvent struct {
	DeploymentOrderID *big.Int
	Provider          common.Address
	Success           bool
	FaasLevelID       *big.Int
	UnitPrice         *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterBiddingEndEvent is a free log retrieval operation binding the contract event 0xfb7ebde163245591a20fe6c28c03b154a1e962ced30f0a1539543408e39caca5.
//
// Solidity: event BiddingEndEvent(uint256 indexed _deploymentOrderID, address indexed _provider, bool indexed _success, uint256 _faasLevelID, uint256 _unitPrice)
func (_Market *MarketFilterer) FilterBiddingEndEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int, _provider []common.Address, _success []bool) (*MarketBiddingEndEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}
	var _successRule []interface{}
	for _, _successItem := range _success {
		_successRule = append(_successRule, _successItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "BiddingEndEvent", _deploymentOrderIDRule, _providerRule, _successRule)
	if err != nil {
		return nil, err
	}
	return &MarketBiddingEndEventIterator{contract: _Market.contract, event: "BiddingEndEvent", logs: logs, sub: sub}, nil
}

// WatchBiddingEndEvent is a free log subscription operation binding the contract event 0xfb7ebde163245591a20fe6c28c03b154a1e962ced30f0a1539543408e39caca5.
//
// Solidity: event BiddingEndEvent(uint256 indexed _deploymentOrderID, address indexed _provider, bool indexed _success, uint256 _faasLevelID, uint256 _unitPrice)
func (_Market *MarketFilterer) WatchBiddingEndEvent(opts *bind.WatchOpts, sink chan<- *MarketBiddingEndEvent, _deploymentOrderID []*big.Int, _provider []common.Address, _success []bool) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}
	var _successRule []interface{}
	for _, _successItem := range _success {
		_successRule = append(_successRule, _successItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "BiddingEndEvent", _deploymentOrderIDRule, _providerRule, _successRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketBiddingEndEvent)
				if err := _Market.contract.UnpackLog(event, "BiddingEndEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBiddingEndEvent is a log parse operation binding the contract event 0xfb7ebde163245591a20fe6c28c03b154a1e962ced30f0a1539543408e39caca5.
//
// Solidity: event BiddingEndEvent(uint256 indexed _deploymentOrderID, address indexed _provider, bool indexed _success, uint256 _faasLevelID, uint256 _unitPrice)
func (_Market *MarketFilterer) ParseBiddingEndEvent(log types.Log) (*MarketBiddingEndEvent, error) {
	event := new(MarketBiddingEndEvent)
	if err := _Market.contract.UnpackLog(event, "BiddingEndEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketFinishDeploymentOrderEventIterator is returned from FilterFinishDeploymentOrderEvent and is used to iterate over the raw logs and unpacked data for FinishDeploymentOrderEvent events raised by the Market contract.
type MarketFinishDeploymentOrderEventIterator struct {
	Event *MarketFinishDeploymentOrderEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketFinishDeploymentOrderEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketFinishDeploymentOrderEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketFinishDeploymentOrderEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketFinishDeploymentOrderEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketFinishDeploymentOrderEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketFinishDeploymentOrderEvent represents a FinishDeploymentOrderEvent event raised by the Market contract.
type MarketFinishDeploymentOrderEvent struct {
	DeploymentOrderID *big.Int
	IsViolatedSLA     bool
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterFinishDeploymentOrderEvent is a free log retrieval operation binding the contract event 0xbc5f0c1789a28272d5f33803afe7fe389319da303c28b0f1eaaf46b93d4a7f4e.
//
// Solidity: event FinishDeploymentOrderEvent(uint256 indexed _deploymentOrderID, bool isViolatedSLA)
func (_Market *MarketFilterer) FilterFinishDeploymentOrderEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketFinishDeploymentOrderEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "FinishDeploymentOrderEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketFinishDeploymentOrderEventIterator{contract: _Market.contract, event: "FinishDeploymentOrderEvent", logs: logs, sub: sub}, nil
}

// WatchFinishDeploymentOrderEvent is a free log subscription operation binding the contract event 0xbc5f0c1789a28272d5f33803afe7fe389319da303c28b0f1eaaf46b93d4a7f4e.
//
// Solidity: event FinishDeploymentOrderEvent(uint256 indexed _deploymentOrderID, bool isViolatedSLA)
func (_Market *MarketFilterer) WatchFinishDeploymentOrderEvent(opts *bind.WatchOpts, sink chan<- *MarketFinishDeploymentOrderEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "FinishDeploymentOrderEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketFinishDeploymentOrderEvent)
				if err := _Market.contract.UnpackLog(event, "FinishDeploymentOrderEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinishDeploymentOrderEvent is a log parse operation binding the contract event 0xbc5f0c1789a28272d5f33803afe7fe389319da303c28b0f1eaaf46b93d4a7f4e.
//
// Solidity: event FinishDeploymentOrderEvent(uint256 indexed _deploymentOrderID, bool isViolatedSLA)
func (_Market *MarketFilterer) ParseFinishDeploymentOrderEvent(log types.Log) (*MarketFinishDeploymentOrderEvent, error) {
	event := new(MarketFinishDeploymentOrderEvent)
	if err := _Market.contract.UnpackLog(event, "FinishDeploymentOrderEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketNewDeploymentInfoEventIterator is returned from FilterNewDeploymentInfoEvent and is used to iterate over the raw logs and unpacked data for NewDeploymentInfoEvent events raised by the Market contract.
type MarketNewDeploymentInfoEventIterator struct {
	Event *MarketNewDeploymentInfoEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewDeploymentInfoEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewDeploymentInfoEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewDeploymentInfoEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewDeploymentInfoEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewDeploymentInfoEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewDeploymentInfoEvent represents a NewDeploymentInfoEvent event raised by the Market contract.
type MarketNewDeploymentInfoEvent struct {
	DeploymentOrderID *big.Int
	Provider          common.Address
	FuncPath          string
	DeployPath        string
	AccessKey         string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewDeploymentInfoEvent is a free log retrieval operation binding the contract event 0x0582b9b7e9b93f00757aeec01d3d44ea8a3984ba35dce2f52240159f240717e2.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address indexed _provider, string funcPath, string deployPath, string accessKey)
func (_Market *MarketFilterer) FilterNewDeploymentInfoEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int, _provider []common.Address) (*MarketNewDeploymentInfoEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewDeploymentInfoEvent", _deploymentOrderIDRule, _providerRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewDeploymentInfoEventIterator{contract: _Market.contract, event: "NewDeploymentInfoEvent", logs: logs, sub: sub}, nil
}

// WatchNewDeploymentInfoEvent is a free log subscription operation binding the contract event 0x0582b9b7e9b93f00757aeec01d3d44ea8a3984ba35dce2f52240159f240717e2.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address indexed _provider, string funcPath, string deployPath, string accessKey)
func (_Market *MarketFilterer) WatchNewDeploymentInfoEvent(opts *bind.WatchOpts, sink chan<- *MarketNewDeploymentInfoEvent, _deploymentOrderID []*big.Int, _provider []common.Address) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewDeploymentInfoEvent", _deploymentOrderIDRule, _providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewDeploymentInfoEvent)
				if err := _Market.contract.UnpackLog(event, "NewDeploymentInfoEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDeploymentInfoEvent is a log parse operation binding the contract event 0x0582b9b7e9b93f00757aeec01d3d44ea8a3984ba35dce2f52240159f240717e2.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address indexed _provider, string funcPath, string deployPath, string accessKey)
func (_Market *MarketFilterer) ParseNewDeploymentInfoEvent(log types.Log) (*MarketNewDeploymentInfoEvent, error) {
	event := new(MarketNewDeploymentInfoEvent)
	if err := _Market.contract.UnpackLog(event, "NewDeploymentInfoEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketNewDeploymentOrderEventIterator is returned from FilterNewDeploymentOrderEvent and is used to iterate over the raw logs and unpacked data for NewDeploymentOrderEvent events raised by the Market contract.
type MarketNewDeploymentOrderEventIterator struct {
	Event *MarketNewDeploymentOrderEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewDeploymentOrderEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewDeploymentOrderEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewDeploymentOrderEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewDeploymentOrderEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewDeploymentOrderEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewDeploymentOrderEvent represents a NewDeploymentOrderEvent event raised by the Market contract.
type MarketNewDeploymentOrderEvent struct {
	Customer          common.Address
	Nonce             *big.Int
	DeploymentOrderID *big.Int
	FaasLevelID       *big.Int
	HighestUnitPrice  *big.Int
	FaasDuration      *big.Int
	BiddingDuration   *big.Int
	PublicKey         string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewDeploymentOrderEvent is a free log retrieval operation binding the contract event 0xd32ac8fb2b834b88380e29bf1da43a6e367869ff14460326f3bc9561229514b9.
//
// Solidity: event NewDeploymentOrderEvent(address indexed _customer, uint256 indexed _nonce, uint256 indexed _deploymentOrderID, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration, string _publicKey)
func (_Market *MarketFilterer) FilterNewDeploymentOrderEvent(opts *bind.FilterOpts, _customer []common.Address, _nonce []*big.Int, _deploymentOrderID []*big.Int) (*MarketNewDeploymentOrderEventIterator, error) {

	var _customerRule []interface{}
	for _, _customerItem := range _customer {
		_customerRule = append(_customerRule, _customerItem)
	}
	var _nonceRule []interface{}
	for _, _nonceItem := range _nonce {
		_nonceRule = append(_nonceRule, _nonceItem)
	}
	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewDeploymentOrderEvent", _customerRule, _nonceRule, _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewDeploymentOrderEventIterator{contract: _Market.contract, event: "NewDeploymentOrderEvent", logs: logs, sub: sub}, nil
}

// WatchNewDeploymentOrderEvent is a free log subscription operation binding the contract event 0xd32ac8fb2b834b88380e29bf1da43a6e367869ff14460326f3bc9561229514b9.
//
// Solidity: event NewDeploymentOrderEvent(address indexed _customer, uint256 indexed _nonce, uint256 indexed _deploymentOrderID, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration, string _publicKey)
func (_Market *MarketFilterer) WatchNewDeploymentOrderEvent(opts *bind.WatchOpts, sink chan<- *MarketNewDeploymentOrderEvent, _customer []common.Address, _nonce []*big.Int, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _customerRule []interface{}
	for _, _customerItem := range _customer {
		_customerRule = append(_customerRule, _customerItem)
	}
	var _nonceRule []interface{}
	for _, _nonceItem := range _nonce {
		_nonceRule = append(_nonceRule, _nonceItem)
	}
	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewDeploymentOrderEvent", _customerRule, _nonceRule, _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewDeploymentOrderEvent)
				if err := _Market.contract.UnpackLog(event, "NewDeploymentOrderEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDeploymentOrderEvent is a log parse operation binding the contract event 0xd32ac8fb2b834b88380e29bf1da43a6e367869ff14460326f3bc9561229514b9.
//
// Solidity: event NewDeploymentOrderEvent(address indexed _customer, uint256 indexed _nonce, uint256 indexed _deploymentOrderID, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration, string _publicKey)
func (_Market *MarketFilterer) ParseNewDeploymentOrderEvent(log types.Log) (*MarketNewDeploymentOrderEvent, error) {
	event := new(MarketNewDeploymentOrderEvent)
	if err := _Market.contract.UnpackLog(event, "NewDeploymentOrderEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketNewLeaseEventIterator is returned from FilterNewLeaseEvent and is used to iterate over the raw logs and unpacked data for NewLeaseEvent events raised by the Market contract.
type MarketNewLeaseEventIterator struct {
	Event *MarketNewLeaseEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewLeaseEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewLeaseEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewLeaseEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewLeaseEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewLeaseEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewLeaseEvent represents a NewLeaseEvent event raised by the Market contract.
type MarketNewLeaseEvent struct {
	DeploymentOrderID *big.Int
	Customer          common.Address
	Provider          common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewLeaseEvent is a free log retrieval operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address indexed _customer, address indexed _provider)
func (_Market *MarketFilterer) FilterNewLeaseEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int, _customer []common.Address, _provider []common.Address) (*MarketNewLeaseEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _customerRule []interface{}
	for _, _customerItem := range _customer {
		_customerRule = append(_customerRule, _customerItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewLeaseEvent", _deploymentOrderIDRule, _customerRule, _providerRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewLeaseEventIterator{contract: _Market.contract, event: "NewLeaseEvent", logs: logs, sub: sub}, nil
}

// WatchNewLeaseEvent is a free log subscription operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address indexed _customer, address indexed _provider)
func (_Market *MarketFilterer) WatchNewLeaseEvent(opts *bind.WatchOpts, sink chan<- *MarketNewLeaseEvent, _deploymentOrderID []*big.Int, _customer []common.Address, _provider []common.Address) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _customerRule []interface{}
	for _, _customerItem := range _customer {
		_customerRule = append(_customerRule, _customerItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewLeaseEvent", _deploymentOrderIDRule, _customerRule, _providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewLeaseEvent)
				if err := _Market.contract.UnpackLog(event, "NewLeaseEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewLeaseEvent is a log parse operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address indexed _customer, address indexed _provider)
func (_Market *MarketFilterer) ParseNewLeaseEvent(log types.Log) (*MarketNewLeaseEvent, error) {
	event := new(MarketNewLeaseEvent)
	if err := _Market.contract.UnpackLog(event, "NewLeaseEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketNewSLAEventIterator is returned from FilterNewSLAEvent and is used to iterate over the raw logs and unpacked data for NewSLAEvent events raised by the Market contract.
type MarketNewSLAEventIterator struct {
	Event *MarketNewSLAEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewSLAEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewSLAEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewSLAEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewSLAEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewSLAEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewSLAEvent represents a NewSLAEvent event raised by the Market contract.
type MarketNewSLAEvent struct {
	DeploymentOrderID *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewSLAEvent is a free log retrieval operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) FilterNewSLAEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewSLAEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewSLAEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewSLAEventIterator{contract: _Market.contract, event: "NewSLAEvent", logs: logs, sub: sub}, nil
}

// WatchNewSLAEvent is a free log subscription operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) WatchNewSLAEvent(opts *bind.WatchOpts, sink chan<- *MarketNewSLAEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewSLAEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewSLAEvent)
				if err := _Market.contract.UnpackLog(event, "NewSLAEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSLAEvent is a log parse operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) ParseNewSLAEvent(log types.Log) (*MarketNewSLAEvent, error) {
	event := new(MarketNewSLAEvent)
	if err := _Market.contract.UnpackLog(event, "NewSLAEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketAddFaaSLevelEventIterator is returned from FilterAddFaaSLevelEvent and is used to iterate over the raw logs and unpacked data for AddFaaSLevelEvent events raised by the Market contract.
type MarketAddFaaSLevelEventIterator struct {
	Event *MarketAddFaaSLevelEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketAddFaaSLevelEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketAddFaaSLevelEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketAddFaaSLevelEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketAddFaaSLevelEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketAddFaaSLevelEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketAddFaaSLevelEvent represents a AddFaaSLevelEvent event raised by the Market contract.
type MarketAddFaaSLevelEvent struct {
	Index *big.Int
	Core  *big.Int
	Mem   *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddFaaSLevelEvent is a free log retrieval operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed _index, uint256 _core, uint256 _mem)
func (_Market *MarketFilterer) FilterAddFaaSLevelEvent(opts *bind.FilterOpts, _index []*big.Int) (*MarketAddFaaSLevelEventIterator, error) {

	var _indexRule []interface{}
	for _, _indexItem := range _index {
		_indexRule = append(_indexRule, _indexItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "addFaaSLevelEvent", _indexRule)
	if err != nil {
		return nil, err
	}
	return &MarketAddFaaSLevelEventIterator{contract: _Market.contract, event: "addFaaSLevelEvent", logs: logs, sub: sub}, nil
}

// WatchAddFaaSLevelEvent is a free log subscription operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed _index, uint256 _core, uint256 _mem)
func (_Market *MarketFilterer) WatchAddFaaSLevelEvent(opts *bind.WatchOpts, sink chan<- *MarketAddFaaSLevelEvent, _index []*big.Int) (event.Subscription, error) {

	var _indexRule []interface{}
	for _, _indexItem := range _index {
		_indexRule = append(_indexRule, _indexItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "addFaaSLevelEvent", _indexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketAddFaaSLevelEvent)
				if err := _Market.contract.UnpackLog(event, "addFaaSLevelEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddFaaSLevelEvent is a log parse operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed _index, uint256 _core, uint256 _mem)
func (_Market *MarketFilterer) ParseAddFaaSLevelEvent(log types.Log) (*MarketAddFaaSLevelEvent, error) {
	event := new(MarketAddFaaSLevelEvent)
	if err := _Market.contract.UnpackLog(event, "addFaaSLevelEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
