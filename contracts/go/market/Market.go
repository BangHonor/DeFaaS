// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package market

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	"github.com/FISCO-BCOS/go-sdk/event"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketABI is the input ABI used to generate the binding from.
const MarketABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionEndEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"NewDeploymentInfoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"NewDeploymentOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"NewLeaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"NewSLAEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"core\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mem\",\"type\":\"uint256\"}],\"name\":\"addFaaSLevelEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_core\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mem\",\"type\":\"uint256\"}],\"name\":\"addFaaSLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faaSDuration\",\"type\":\"uint256\"}],\"name\":\"calculateLockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faaSDuration\",\"type\":\"uint256\"}],\"name\":\"calculateServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"customerConfirm\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"finishDeploymemtOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"fulfillDeploymentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"getDeploymentOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelID\",\"type\":\"uint256\"}],\"name\":\"getFaaSLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFaaSLevelNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStdProviderDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProviderQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProviderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"matchDeploymentOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_faaSLevelID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faaSDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_biddingDuration\",\"type\":\"uint256\"}],\"name\":\"newDeploymentOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_endAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_funcPath\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_deployServerAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_accessSecretKey\",\"type\":\"string\"}],\"name\":\"providerConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerLogin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerLogout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"settleDeploymentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contractFaaSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MarketBin is the compiled bytecode used for deploying new contracts.
var MarketBin = ""

// DeployMarket deploys a new contract, binding an instance of Market to it.
func DeployMarket(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenContractAddress common.Address) (common.Address, *types.Transaction, *Market, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketBin), backend, _tokenContractAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

func AsyncDeployMarket(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend, _tokenContractAddress common.Address) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(MarketBin), backend, _tokenContractAddress)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// Market is an auto generated Go binding around a Solidity contract.
type Market struct {
	MarketCaller     // Read-only binding to the contract
	MarketTransactor // Write-only binding to the contract
	MarketFilterer   // Log filterer for contract events
}

// MarketCaller is an auto generated read-only Go binding around a Solidity contract.
type MarketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketTransactor is an auto generated write-only Go binding around a Solidity contract.
type MarketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type MarketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type MarketSession struct {
	Contract     *Market           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type MarketCallerSession struct {
	Contract *MarketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MarketTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type MarketTransactorSession struct {
	Contract     *MarketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketRaw is an auto generated low-level Go binding around a Solidity contract.
type MarketRaw struct {
	Contract *Market // Generic contract binding to access the raw methods on
}

// MarketCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type MarketCallerRaw struct {
	Contract *MarketCaller // Generic read-only contract binding to access the raw methods on
}

// MarketTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type MarketTransactorRaw struct {
	Contract *MarketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarket creates a new instance of Market, bound to a specific deployed contract.
func NewMarket(address common.Address, backend bind.ContractBackend) (*Market, error) {
	contract, err := bindMarket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// NewMarketCaller creates a new read-only instance of Market, bound to a specific deployed contract.
func NewMarketCaller(address common.Address, caller bind.ContractCaller) (*MarketCaller, error) {
	contract, err := bindMarket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketCaller{contract: contract}, nil
}

// NewMarketTransactor creates a new write-only instance of Market, bound to a specific deployed contract.
func NewMarketTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketTransactor, error) {
	contract, err := bindMarket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketTransactor{contract: contract}, nil
}

// NewMarketFilterer creates a new log filterer instance of Market, bound to a specific deployed contract.
func NewMarketFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketFilterer, error) {
	contract, err := bindMarket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketFilterer{contract: contract}, nil
}

// bindMarket binds a generic wrapper to an already deployed contract.
func bindMarket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Market.Contract.MarketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.MarketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.MarketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Market.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.contract.Transact(opts, method, params...)
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketCaller) CalculateLockFee(opts *bind.CallOpts, _highestUnitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "calculateLockFee", _highestUnitPrice, _faaSDuration)
	return *ret0, err
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketSession) CalculateLockFee(_highestUnitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateLockFee(&_Market.CallOpts, _highestUnitPrice, _faaSDuration)
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketCallerSession) CalculateLockFee(_highestUnitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateLockFee(&_Market.CallOpts, _highestUnitPrice, _faaSDuration)
}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketCaller) CalculateServiceFee(opts *bind.CallOpts, _unitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "calculateServiceFee", _unitPrice, _faaSDuration)
	return *ret0, err
}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketSession) CalculateServiceFee(_unitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateServiceFee(&_Market.CallOpts, _unitPrice, _faaSDuration)
}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketCallerSession) CalculateServiceFee(_unitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateServiceFee(&_Market.CallOpts, _unitPrice, _faaSDuration)
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) constant returns(address, uint256, uint256, uint256)
func (_Market *MarketCaller) GetDeploymentOrder(opts *bind.CallOpts, _deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Market.contract.Call(opts, out, "getDeploymentOrder", _deploymentOrderID)
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) constant returns(address, uint256, uint256, uint256)
func (_Market *MarketSession) GetDeploymentOrder(_deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	return _Market.Contract.GetDeploymentOrder(&_Market.CallOpts, _deploymentOrderID)
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) constant returns(address, uint256, uint256, uint256)
func (_Market *MarketCallerSession) GetDeploymentOrder(_deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	return _Market.Contract.GetDeploymentOrder(&_Market.CallOpts, _deploymentOrderID)
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _levelID) constant returns(bool, uint256, uint256)
func (_Market *MarketCaller) GetFaaSLevel(opts *bind.CallOpts, _levelID *big.Int) (bool, *big.Int, *big.Int, error) {
	var (
		ret0 = new(bool)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _Market.contract.Call(opts, out, "getFaaSLevel", _levelID)
	return *ret0, *ret1, *ret2, err
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _levelID) constant returns(bool, uint256, uint256)
func (_Market *MarketSession) GetFaaSLevel(_levelID *big.Int) (bool, *big.Int, *big.Int, error) {
	return _Market.Contract.GetFaaSLevel(&_Market.CallOpts, _levelID)
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _levelID) constant returns(bool, uint256, uint256)
func (_Market *MarketCallerSession) GetFaaSLevel(_levelID *big.Int) (bool, *big.Int, *big.Int, error) {
	return _Market.Contract.GetFaaSLevel(&_Market.CallOpts, _levelID)
}

// GetFaaSLevelNumber is a free data retrieval call binding the contract method 0xc7807478.
//
// Solidity: function getFaaSLevelNumber() constant returns(uint256)
func (_Market *MarketCaller) GetFaaSLevelNumber(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "getFaaSLevelNumber")
	return *ret0, err
}

// GetFaaSLevelNumber is a free data retrieval call binding the contract method 0xc7807478.
//
// Solidity: function getFaaSLevelNumber() constant returns(uint256)
func (_Market *MarketSession) GetFaaSLevelNumber() (*big.Int, error) {
	return _Market.Contract.GetFaaSLevelNumber(&_Market.CallOpts)
}

// GetFaaSLevelNumber is a free data retrieval call binding the contract method 0xc7807478.
//
// Solidity: function getFaaSLevelNumber() constant returns(uint256)
func (_Market *MarketCallerSession) GetFaaSLevelNumber() (*big.Int, error) {
	return _Market.Contract.GetFaaSLevelNumber(&_Market.CallOpts)
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) constant returns(uint256)
func (_Market *MarketCaller) GetProviderDeposit(opts *bind.CallOpts, _provider common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "getProviderDeposit", _provider)
	return *ret0, err
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) constant returns(uint256)
func (_Market *MarketSession) GetProviderDeposit(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderDeposit(&_Market.CallOpts, _provider)
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) constant returns(uint256)
func (_Market *MarketCallerSession) GetProviderDeposit(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderDeposit(&_Market.CallOpts, _provider)
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) constant returns(uint256)
func (_Market *MarketCaller) GetProviderReputation(opts *bind.CallOpts, _provider common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "getProviderReputation", _provider)
	return *ret0, err
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) constant returns(uint256)
func (_Market *MarketSession) GetProviderReputation(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderReputation(&_Market.CallOpts, _provider)
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) constant returns(uint256)
func (_Market *MarketCallerSession) GetProviderReputation(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderReputation(&_Market.CallOpts, _provider)
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() constant returns(uint256)
func (_Market *MarketCaller) GetStdProviderDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "getStdProviderDeposit")
	return *ret0, err
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() constant returns(uint256)
func (_Market *MarketSession) GetStdProviderDeposit() (*big.Int, error) {
	return _Market.Contract.GetStdProviderDeposit(&_Market.CallOpts)
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() constant returns(uint256)
func (_Market *MarketCallerSession) GetStdProviderDeposit() (*big.Int, error) {
	return _Market.Contract.GetStdProviderDeposit(&_Market.CallOpts)
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) constant returns(bool)
func (_Market *MarketCaller) IsProviderQualified(opts *bind.CallOpts, _provider common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "isProviderQualified", _provider)
	return *ret0, err
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) constant returns(bool)
func (_Market *MarketSession) IsProviderQualified(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderQualified(&_Market.CallOpts, _provider)
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) constant returns(bool)
func (_Market *MarketCallerSession) IsProviderQualified(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderQualified(&_Market.CallOpts, _provider)
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) constant returns(bool)
func (_Market *MarketCaller) IsProviderRegistered(opts *bind.CallOpts, _provider common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "isProviderRegistered", _provider)
	return *ret0, err
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) constant returns(bool)
func (_Market *MarketSession) IsProviderRegistered(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderRegistered(&_Market.CallOpts, _provider)
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) constant returns(bool)
func (_Market *MarketCallerSession) IsProviderRegistered(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderRegistered(&_Market.CallOpts, _provider)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketCallerSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_Market *MarketCaller) TokenContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "tokenContract")
	return *ret0, err
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_Market *MarketSession) TokenContract() (common.Address, error) {
	return _Market.Contract.TokenContract(&_Market.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_Market *MarketCallerSession) TokenContract() (common.Address, error) {
	return _Market.Contract.TokenContract(&_Market.CallOpts)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns(uint256)
func (_Market *MarketTransactor) AddFaaSLevel(opts *bind.TransactOpts, _core *big.Int, _mem *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "addFaaSLevel", _core, _mem)
}

func (_Market *MarketTransactor) AsyncAddFaaSLevel(handler func(*types.Receipt, error), opts *bind.TransactOpts, _core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "addFaaSLevel", _core, _mem)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns(uint256)
func (_Market *MarketSession) AddFaaSLevel(_core *big.Int, _mem *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.AddFaaSLevel(&_Market.TransactOpts, _core, _mem)
}

func (_Market *MarketSession) AsyncAddFaaSLevel(handler func(*types.Receipt, error), _core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncAddFaaSLevel(handler, &_Market.TransactOpts, _core, _mem)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns(uint256)
func (_Market *MarketTransactorSession) AddFaaSLevel(_core *big.Int, _mem *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.AddFaaSLevel(&_Market.TransactOpts, _core, _mem)
}

func (_Market *MarketTransactorSession) AsyncAddFaaSLevel(handler func(*types.Receipt, error), _core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncAddFaaSLevel(handler, &_Market.TransactOpts, _core, _mem)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketTransactor) Bid(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "bid", _deploymentOrderID, _unitPrice)
}

func (_Market *MarketTransactor) AsyncBid(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "bid", _deploymentOrderID, _unitPrice)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketSession) Bid(_deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.Bid(&_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

func (_Market *MarketSession) AsyncBid(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncBid(handler, &_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketTransactorSession) Bid(_deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.Bid(&_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

func (_Market *MarketTransactorSession) AsyncBid(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncBid(handler, &_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

// CustomerConfirm is a paid mutator transaction binding the contract method 0xae2adb9c.
//
// Solidity: function customerConfirm(uint256 _deploymentOrderID) returns(string, string, string, string)
func (_Market *MarketTransactor) CustomerConfirm(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "customerConfirm", _deploymentOrderID)
}

func (_Market *MarketTransactor) AsyncCustomerConfirm(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "customerConfirm", _deploymentOrderID)
}

// CustomerConfirm is a paid mutator transaction binding the contract method 0xae2adb9c.
//
// Solidity: function customerConfirm(uint256 _deploymentOrderID) returns(string, string, string, string)
func (_Market *MarketSession) CustomerConfirm(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.CustomerConfirm(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketSession) AsyncCustomerConfirm(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncCustomerConfirm(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// CustomerConfirm is a paid mutator transaction binding the contract method 0xae2adb9c.
//
// Solidity: function customerConfirm(uint256 _deploymentOrderID) returns(string, string, string, string)
func (_Market *MarketTransactorSession) CustomerConfirm(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.CustomerConfirm(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketTransactorSession) AsyncCustomerConfirm(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncCustomerConfirm(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) FinishDeploymemtOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "finishDeploymemtOrder", _deploymentOrderID)
}

func (_Market *MarketTransactor) AsyncFinishDeploymemtOrder(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "finishDeploymemtOrder", _deploymentOrderID)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) FinishDeploymemtOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.FinishDeploymemtOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketSession) AsyncFinishDeploymemtOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncFinishDeploymemtOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) FinishDeploymemtOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.FinishDeploymemtOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketTransactorSession) AsyncFinishDeploymemtOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncFinishDeploymemtOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xb8f9898f.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) FulfillDeploymentOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "fulfillDeploymentOrder", _deploymentOrderID)
}

func (_Market *MarketTransactor) AsyncFulfillDeploymentOrder(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "fulfillDeploymentOrder", _deploymentOrderID)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xb8f9898f.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) FulfillDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.FulfillDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketSession) AsyncFulfillDeploymentOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncFulfillDeploymentOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xb8f9898f.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) FulfillDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.FulfillDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketTransactorSession) AsyncFulfillDeploymentOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncFulfillDeploymentOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns(bool)
func (_Market *MarketTransactor) MatchDeploymentOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "matchDeploymentOrder", _deploymentOrderID)
}

func (_Market *MarketTransactor) AsyncMatchDeploymentOrder(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "matchDeploymentOrder", _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns(bool)
func (_Market *MarketSession) MatchDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.MatchDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketSession) AsyncMatchDeploymentOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncMatchDeploymentOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns(bool)
func (_Market *MarketTransactorSession) MatchDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.MatchDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketTransactorSession) AsyncMatchDeploymentOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncMatchDeploymentOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0xdbd4314f.
//
// Solidity: function newDeploymentOrder(uint256 _faaSLevelID, uint256 _highestUnitPrice, uint256 _faaSDuration, uint256 _biddingDuration) returns(uint256)
func (_Market *MarketTransactor) NewDeploymentOrder(opts *bind.TransactOpts, _faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "newDeploymentOrder", _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

func (_Market *MarketTransactor) AsyncNewDeploymentOrder(handler func(*types.Receipt, error), opts *bind.TransactOpts, _faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "newDeploymentOrder", _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0xdbd4314f.
//
// Solidity: function newDeploymentOrder(uint256 _faaSLevelID, uint256 _highestUnitPrice, uint256 _faaSDuration, uint256 _biddingDuration) returns(uint256)
func (_Market *MarketSession) NewDeploymentOrder(_faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.NewDeploymentOrder(&_Market.TransactOpts, _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

func (_Market *MarketSession) AsyncNewDeploymentOrder(handler func(*types.Receipt, error), _faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncNewDeploymentOrder(handler, &_Market.TransactOpts, _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0xdbd4314f.
//
// Solidity: function newDeploymentOrder(uint256 _faaSLevelID, uint256 _highestUnitPrice, uint256 _faaSDuration, uint256 _biddingDuration) returns(uint256)
func (_Market *MarketTransactorSession) NewDeploymentOrder(_faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.NewDeploymentOrder(&_Market.TransactOpts, _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

func (_Market *MarketTransactorSession) AsyncNewDeploymentOrder(handler func(*types.Receipt, error), _faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncNewDeploymentOrder(handler, &_Market.TransactOpts, _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

// ProviderConfirm is a paid mutator transaction binding the contract method 0x96f0b152.
//
// Solidity: function providerConfirm(uint256 _deploymentOrderID, string _endAddr, string _funcPath, string _deployServerAddr, string _accessSecretKey) returns()
func (_Market *MarketTransactor) ProviderConfirm(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _endAddr string, _funcPath string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "providerConfirm", _deploymentOrderID, _endAddr, _funcPath, _deployServerAddr, _accessSecretKey)
}

func (_Market *MarketTransactor) AsyncProviderConfirm(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int, _endAddr string, _funcPath string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "providerConfirm", _deploymentOrderID, _endAddr, _funcPath, _deployServerAddr, _accessSecretKey)
}

// ProviderConfirm is a paid mutator transaction binding the contract method 0x96f0b152.
//
// Solidity: function providerConfirm(uint256 _deploymentOrderID, string _endAddr, string _funcPath, string _deployServerAddr, string _accessSecretKey) returns()
func (_Market *MarketSession) ProviderConfirm(_deploymentOrderID *big.Int, _endAddr string, _funcPath string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderConfirm(&_Market.TransactOpts, _deploymentOrderID, _endAddr, _funcPath, _deployServerAddr, _accessSecretKey)
}

func (_Market *MarketSession) AsyncProviderConfirm(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _endAddr string, _funcPath string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderConfirm(handler, &_Market.TransactOpts, _deploymentOrderID, _endAddr, _funcPath, _deployServerAddr, _accessSecretKey)
}

// ProviderConfirm is a paid mutator transaction binding the contract method 0x96f0b152.
//
// Solidity: function providerConfirm(uint256 _deploymentOrderID, string _endAddr, string _funcPath, string _deployServerAddr, string _accessSecretKey) returns()
func (_Market *MarketTransactorSession) ProviderConfirm(_deploymentOrderID *big.Int, _endAddr string, _funcPath string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderConfirm(&_Market.TransactOpts, _deploymentOrderID, _endAddr, _funcPath, _deployServerAddr, _accessSecretKey)
}

func (_Market *MarketTransactorSession) AsyncProviderConfirm(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _endAddr string, _funcPath string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderConfirm(handler, &_Market.TransactOpts, _deploymentOrderID, _endAddr, _funcPath, _deployServerAddr, _accessSecretKey)
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketTransactor) ProviderLogin(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "providerLogin")
}

func (_Market *MarketTransactor) AsyncProviderLogin(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "providerLogin")
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketSession) ProviderLogin() (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderLogin(&_Market.TransactOpts)
}

func (_Market *MarketSession) AsyncProviderLogin(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderLogin(handler, &_Market.TransactOpts)
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketTransactorSession) ProviderLogin() (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderLogin(&_Market.TransactOpts)
}

func (_Market *MarketTransactorSession) AsyncProviderLogin(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderLogin(handler, &_Market.TransactOpts)
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketTransactor) ProviderLogout(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "providerLogout")
}

func (_Market *MarketTransactor) AsyncProviderLogout(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "providerLogout")
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketSession) ProviderLogout() (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderLogout(&_Market.TransactOpts)
}

func (_Market *MarketSession) AsyncProviderLogout(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderLogout(handler, &_Market.TransactOpts)
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketTransactorSession) ProviderLogout() (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderLogout(&_Market.TransactOpts)
}

func (_Market *MarketTransactorSession) AsyncProviderLogout(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderLogout(handler, &_Market.TransactOpts)
}

// SettleDeploymentOrder is a paid mutator transaction binding the contract method 0x4be4243b.
//
// Solidity: function settleDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) SettleDeploymentOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "settleDeploymentOrder", _deploymentOrderID)
}

func (_Market *MarketTransactor) AsyncSettleDeploymentOrder(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "settleDeploymentOrder", _deploymentOrderID)
}

// SettleDeploymentOrder is a paid mutator transaction binding the contract method 0x4be4243b.
//
// Solidity: function settleDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) SettleDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.SettleDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketSession) AsyncSettleDeploymentOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncSettleDeploymentOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// SettleDeploymentOrder is a paid mutator transaction binding the contract method 0x4be4243b.
//
// Solidity: function settleDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) SettleDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.SettleDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketTransactorSession) AsyncSettleDeploymentOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncSettleDeploymentOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// MarketAuctionEndEventIterator is returned from FilterAuctionEndEvent and is used to iterate over the raw logs and unpacked data for AuctionEndEvent events raised by the Market contract.
type MarketAuctionEndEventIterator struct {
	Event *MarketAuctionEndEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketAuctionEndEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketAuctionEndEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketAuctionEndEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketAuctionEndEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketAuctionEndEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketAuctionEndEvent represents a AuctionEndEvent event raised by the Market contract.
type MarketAuctionEndEvent struct {
	DeploymentOrderID *big.Int
	Success           bool
	Provider          common.Address
	UnitPrice         *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAuctionEndEvent is a free log retrieval operation binding the contract event 0x7621c01b83465196c05b7b0420b555f9b952da7a5168247b5dd4c006ea9be684.
//
// Solidity: event AuctionEndEvent(uint256 indexed _deploymentOrderID, bool _success, address _provider, uint256 _unitPrice)
func (_Market *MarketFilterer) FilterAuctionEndEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketAuctionEndEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "AuctionEndEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketAuctionEndEventIterator{contract: _Market.contract, event: "AuctionEndEvent", logs: logs, sub: sub}, nil
}

// WatchAuctionEndEvent is a free log subscription operation binding the contract event 0x7621c01b83465196c05b7b0420b555f9b952da7a5168247b5dd4c006ea9be684.
//
// Solidity: event AuctionEndEvent(uint256 indexed _deploymentOrderID, bool _success, address _provider, uint256 _unitPrice)
func (_Market *MarketFilterer) WatchAuctionEndEvent(opts *bind.WatchOpts, sink chan<- *MarketAuctionEndEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "AuctionEndEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketAuctionEndEvent)
				if err := _Market.contract.UnpackLog(event, "AuctionEndEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionEndEvent is a log parse operation binding the contract event 0x7621c01b83465196c05b7b0420b555f9b952da7a5168247b5dd4c006ea9be684.
//
// Solidity: event AuctionEndEvent(uint256 indexed _deploymentOrderID, bool _success, address _provider, uint256 _unitPrice)
func (_Market *MarketFilterer) ParseAuctionEndEvent(log types.Log) (*MarketAuctionEndEvent, error) {
	event := new(MarketAuctionEndEvent)
	if err := _Market.contract.UnpackLog(event, "AuctionEndEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketNewDeploymentInfoEventIterator is returned from FilterNewDeploymentInfoEvent and is used to iterate over the raw logs and unpacked data for NewDeploymentInfoEvent events raised by the Market contract.
type MarketNewDeploymentInfoEventIterator struct {
	Event *MarketNewDeploymentInfoEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewDeploymentInfoEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewDeploymentInfoEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewDeploymentInfoEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewDeploymentInfoEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewDeploymentInfoEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewDeploymentInfoEvent represents a NewDeploymentInfoEvent event raised by the Market contract.
type MarketNewDeploymentInfoEvent struct {
	DeploymentOrderID *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewDeploymentInfoEvent is a free log retrieval operation binding the contract event 0xba82571811a2fa8da4037952fa56bc59c713efd47f65b1133414c77bcfb887ff.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) FilterNewDeploymentInfoEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewDeploymentInfoEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewDeploymentInfoEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewDeploymentInfoEventIterator{contract: _Market.contract, event: "NewDeploymentInfoEvent", logs: logs, sub: sub}, nil
}

// WatchNewDeploymentInfoEvent is a free log subscription operation binding the contract event 0xba82571811a2fa8da4037952fa56bc59c713efd47f65b1133414c77bcfb887ff.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) WatchNewDeploymentInfoEvent(opts *bind.WatchOpts, sink chan<- *MarketNewDeploymentInfoEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewDeploymentInfoEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewDeploymentInfoEvent)
				if err := _Market.contract.UnpackLog(event, "NewDeploymentInfoEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDeploymentInfoEvent is a log parse operation binding the contract event 0xba82571811a2fa8da4037952fa56bc59c713efd47f65b1133414c77bcfb887ff.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) ParseNewDeploymentInfoEvent(log types.Log) (*MarketNewDeploymentInfoEvent, error) {
	event := new(MarketNewDeploymentInfoEvent)
	if err := _Market.contract.UnpackLog(event, "NewDeploymentInfoEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketNewDeploymentOrderEventIterator is returned from FilterNewDeploymentOrderEvent and is used to iterate over the raw logs and unpacked data for NewDeploymentOrderEvent events raised by the Market contract.
type MarketNewDeploymentOrderEventIterator struct {
	Event *MarketNewDeploymentOrderEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewDeploymentOrderEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewDeploymentOrderEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewDeploymentOrderEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewDeploymentOrderEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewDeploymentOrderEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewDeploymentOrderEvent represents a NewDeploymentOrderEvent event raised by the Market contract.
type MarketNewDeploymentOrderEvent struct {
	DeploymentOrderID *big.Int
	AuctionAddress    common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewDeploymentOrderEvent is a free log retrieval operation binding the contract event 0xc756dae6c6da0abc4ce6343ee4a6a81c74f1dbbce1ce8a5ca3a765b53203c19f.
//
// Solidity: event NewDeploymentOrderEvent(uint256 indexed _deploymentOrderID, address _auctionAddress)
func (_Market *MarketFilterer) FilterNewDeploymentOrderEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewDeploymentOrderEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewDeploymentOrderEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewDeploymentOrderEventIterator{contract: _Market.contract, event: "NewDeploymentOrderEvent", logs: logs, sub: sub}, nil
}

// WatchNewDeploymentOrderEvent is a free log subscription operation binding the contract event 0xc756dae6c6da0abc4ce6343ee4a6a81c74f1dbbce1ce8a5ca3a765b53203c19f.
//
// Solidity: event NewDeploymentOrderEvent(uint256 indexed _deploymentOrderID, address _auctionAddress)
func (_Market *MarketFilterer) WatchNewDeploymentOrderEvent(opts *bind.WatchOpts, sink chan<- *MarketNewDeploymentOrderEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewDeploymentOrderEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewDeploymentOrderEvent)
				if err := _Market.contract.UnpackLog(event, "NewDeploymentOrderEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDeploymentOrderEvent is a log parse operation binding the contract event 0xc756dae6c6da0abc4ce6343ee4a6a81c74f1dbbce1ce8a5ca3a765b53203c19f.
//
// Solidity: event NewDeploymentOrderEvent(uint256 indexed _deploymentOrderID, address _auctionAddress)
func (_Market *MarketFilterer) ParseNewDeploymentOrderEvent(log types.Log) (*MarketNewDeploymentOrderEvent, error) {
	event := new(MarketNewDeploymentOrderEvent)
	if err := _Market.contract.UnpackLog(event, "NewDeploymentOrderEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketNewLeaseEventIterator is returned from FilterNewLeaseEvent and is used to iterate over the raw logs and unpacked data for NewLeaseEvent events raised by the Market contract.
type MarketNewLeaseEventIterator struct {
	Event *MarketNewLeaseEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewLeaseEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewLeaseEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewLeaseEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewLeaseEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewLeaseEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewLeaseEvent represents a NewLeaseEvent event raised by the Market contract.
type MarketNewLeaseEvent struct {
	DeploymentOrderID *big.Int
	Customer          common.Address
	Provider          common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewLeaseEvent is a free log retrieval operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) FilterNewLeaseEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewLeaseEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewLeaseEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewLeaseEventIterator{contract: _Market.contract, event: "NewLeaseEvent", logs: logs, sub: sub}, nil
}

// WatchNewLeaseEvent is a free log subscription operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) WatchNewLeaseEvent(opts *bind.WatchOpts, sink chan<- *MarketNewLeaseEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewLeaseEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewLeaseEvent)
				if err := _Market.contract.UnpackLog(event, "NewLeaseEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewLeaseEvent is a log parse operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) ParseNewLeaseEvent(log types.Log) (*MarketNewLeaseEvent, error) {
	event := new(MarketNewLeaseEvent)
	if err := _Market.contract.UnpackLog(event, "NewLeaseEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketNewSLAEventIterator is returned from FilterNewSLAEvent and is used to iterate over the raw logs and unpacked data for NewSLAEvent events raised by the Market contract.
type MarketNewSLAEventIterator struct {
	Event *MarketNewSLAEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewSLAEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewSLAEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewSLAEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewSLAEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewSLAEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewSLAEvent represents a NewSLAEvent event raised by the Market contract.
type MarketNewSLAEvent struct {
	DeploymentOrderID *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewSLAEvent is a free log retrieval operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) FilterNewSLAEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewSLAEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewSLAEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewSLAEventIterator{contract: _Market.contract, event: "NewSLAEvent", logs: logs, sub: sub}, nil
}

// WatchNewSLAEvent is a free log subscription operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) WatchNewSLAEvent(opts *bind.WatchOpts, sink chan<- *MarketNewSLAEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewSLAEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewSLAEvent)
				if err := _Market.contract.UnpackLog(event, "NewSLAEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSLAEvent is a log parse operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) ParseNewSLAEvent(log types.Log) (*MarketNewSLAEvent, error) {
	event := new(MarketNewSLAEvent)
	if err := _Market.contract.UnpackLog(event, "NewSLAEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketAddFaaSLevelEventIterator is returned from FilterAddFaaSLevelEvent and is used to iterate over the raw logs and unpacked data for AddFaaSLevelEvent events raised by the Market contract.
type MarketAddFaaSLevelEventIterator struct {
	Event *MarketAddFaaSLevelEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketAddFaaSLevelEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketAddFaaSLevelEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketAddFaaSLevelEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketAddFaaSLevelEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketAddFaaSLevelEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketAddFaaSLevelEvent represents a AddFaaSLevelEvent event raised by the Market contract.
type MarketAddFaaSLevelEvent struct {
	Index *big.Int
	Core  *big.Int
	Mem   *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddFaaSLevelEvent is a free log retrieval operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed index, uint256 core, uint256 mem)
func (_Market *MarketFilterer) FilterAddFaaSLevelEvent(opts *bind.FilterOpts, index []*big.Int) (*MarketAddFaaSLevelEventIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "addFaaSLevelEvent", indexRule)
	if err != nil {
		return nil, err
	}
	return &MarketAddFaaSLevelEventIterator{contract: _Market.contract, event: "addFaaSLevelEvent", logs: logs, sub: sub}, nil
}

// WatchAddFaaSLevelEvent is a free log subscription operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed index, uint256 core, uint256 mem)
func (_Market *MarketFilterer) WatchAddFaaSLevelEvent(opts *bind.WatchOpts, sink chan<- *MarketAddFaaSLevelEvent, index []*big.Int) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "addFaaSLevelEvent", indexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketAddFaaSLevelEvent)
				if err := _Market.contract.UnpackLog(event, "addFaaSLevelEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddFaaSLevelEvent is a log parse operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed index, uint256 core, uint256 mem)
func (_Market *MarketFilterer) ParseAddFaaSLevelEvent(log types.Log) (*MarketAddFaaSLevelEvent, error) {
	event := new(MarketAddFaaSLevelEvent)
	if err := _Market.contract.UnpackLog(event, "addFaaSLevelEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}
