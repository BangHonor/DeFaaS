// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package market

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	"github.com/FISCO-BCOS/go-sdk/event"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketABI is the input ABI used to generate the binding from.
const MarketABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_witnessPoolContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionEndEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"NewDeploymentInfoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"NewDeploymentOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"NewLeaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"core\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mem\",\"type\":\"uint256\"}],\"name\":\"addFaaSLevelEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_core\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mem\",\"type\":\"uint256\"}],\"name\":\"addFaaSLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faaSDuration\",\"type\":\"uint256\"}],\"name\":\"calculateLockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_funcPath\",\"type\":\"string\"}],\"name\":\"customerConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"getDeploymentOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelID\",\"type\":\"uint256\"}],\"name\":\"getFaaSLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFaaSLevelNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStdProviderDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProviderQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProviderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"matchDeploymentOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_faaSLevelID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faaSDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_biddingDuration\",\"type\":\"uint256\"}],\"name\":\"newDeploymentOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_endAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_deployServerAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_accessSecretKey\",\"type\":\"string\"}],\"name\":\"providerConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerLogin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerLogout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contractFaaSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MarketBin is the compiled bytecode used for deploying new contracts.
var MarketBin = "0x60806040523480156200001157600080fd5b50604051620033fc380380620033fc833981810160405260408110156200003757600080fd5b8101908080519060200190929190805190602001909291905050508180336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506000600281905550620000f36001610200620001b560201b60201c565b50620001096001610400620001b560201b60201c565b506200011f6001610800620001b560201b60201c565b50620001356002610400620001b560201b60201c565b506200014b6004610800620001b560201b60201c565b50606460048190555060058081905550600560068190555050600160088190555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000318565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200027a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4f6e6c79206f776e65722063616e2063616c6c20746869732e0000000000000081525060200191505060405180910390fd5b600060026000815480929190600101919050559050604051806040016040528085815260200184815250600360008381526020019081526020016000206000820151816000015560208201518160010155905050807f901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec18585604051808381526020018281526020019250505060405180910390a28091505092915050565b6130d480620003286000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063729d98e9116100ad578063c4c1e49311610071578063c4c1e493146106d6578063c780747814610722578063c86fdf7d14610740578063ce67ca0314610794578063dbd4314f1461081757610121565b8063729d98e914610582578063884eacb8146105da5780638da5cb5b146105e4578063b82964711461062e578063c0b717c01461068a57610121565b80632bf35570116100f45780632bf35570146103d95780634b535c0f146103e357806355a373d6146104a8578063598647f8146104f257806361bb20f01461052a57610121565b806318f645fa146101265780631c0d3ebd1461016c5780631ead914e1461018a5780632b59ca41146101e6575b600080fd5b6101526004803603602081101561013c57600080fd5b8101908080359060200190929190505050610877565b604051808215151515815260200191505060405180910390f35b610174610c45565b6040518082815260200191505060405180910390f35b6101cc600480360360208110156101a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c4f565b604051808215151515815260200191505060405180910390f35b6103d7600480360360808110156101fc57600080fd5b81019080803590602001909291908035906020019064010000000081111561022357600080fd5b82018360208201111561023557600080fd5b8035906020019184600183028401116401000000008311171561025757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102ba57600080fd5b8201836020820111156102cc57600080fd5b803590602001918460018302840111640100000000831117156102ee57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561035157600080fd5b82018360208201111561036357600080fd5b8035906020019184600183028401116401000000008311171561038557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c9d565b005b6103e1610e71565b005b6104a6600480360360408110156103f957600080fd5b81019080803590602001909291908035906020019064010000000081111561042057600080fd5b82018360208201111561043257600080fd5b8035906020019184600183028401116401000000008311171561045457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506110e7565b005b6104b06114f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105286004803603604081101561050857600080fd5b81019080803590602001909291908035906020019092919050505061151a565b005b61056c6004803603602081101561054057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061171e565b6040518082815260200191505060405180910390f35b6105c46004803603602081101561059857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117d1565b6040518082815260200191505060405180910390f35b6105e2611884565b005b6105ec611b65565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106706004803603602081101561064457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b8a565b604051808215151515815260200191505060405180910390f35b6106c0600480360360408110156106a057600080fd5b810190808035906020019092919080359060200190929190505050611bdb565b6040518082815260200191505060405180910390f35b61070c600480360360408110156106ec57600080fd5b810190808035906020019092919080359060200190929190505050611d3d565b6040518082815260200191505060405180910390f35b61072a611d4a565b6040518082815260200191505060405180910390f35b61076c6004803603602081101561075657600080fd5b8101908080359060200190929190505050611d54565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b6107c0600480360360208110156107aa57600080fd5b8101908080359060200190929190505050611daa565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390f35b6108616004803603608081101561082d57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611e0b565b6040518082815260200191505060405180910390f35b600081600061088682826122cb565b6108db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612fa3602f913960400191505060405180910390fd5b60008060006009600088815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a24f46c6040518163ffffffff1660e01b8152600401606060405180830381600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b505050506040513d606081101561098857600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050809350819450829550505050867f7621c01b83465196c05b7b0420b555f9b952da7a5168247b5dd4c006ea9be68484848460405180841515151581526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a2600015158315151415610a8b5760056009600089815260200190815260200160002060000160006101000a81548160ff02191690836005811115610a7157fe5b0217905550610a7f87612311565b60009550505050610c3e565b6040518060c001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160405180602001604052806000815250815260200160405180602001604052806000815250815260200160405180602001604052806000815250815260200160405180602001604052806000815250815250600a600089815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff0219169083151502179055506040820151816001019080519060200190610ba3929190612524565b506060820151816002019080519060200190610bc0929190612524565b506080820151816003019080519060200190610bdd929190612524565b5060a0820151816004019080519060200190610bfa929190612524565b5090505060016009600089815260200190815260200160002060000160006101000a81548160ff02191690836005811115610c3157fe5b0217905550600195505050505b5050919050565b6000600454905090565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154119050919050565b836001610caa82826122cb565b610cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612fa3602f913960400191505060405180910390fd5b600a600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612f276021913960400191505060405180910390fd5b84600a60008881526020019081526020016000206001019080519060200190610de3929190612524565b5083600a60008881526020019081526020016000206003019080519060200190610e0e929190612524565b5082600a60008881526020019081526020016000206004019080519060200190610e39929190612524565b506001600a600088815260200190815260200160002060000160146101000a81548160ff021916908315150217905550505050505050565b3360001515610e7f82610c4f565b151514610ed7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180612f7c6027913960400191505060405180910390fd5b600454600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600554600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610fb5610c45565b6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561105157600080fd5b505af1158015611065573d6000803e3d6000fd5b505050506040513d602081101561107b57600080fd5b81019080805190602001909291905050501515146110e4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180612eb26028913960400191505060405180910390fd5b50565b8160016110f482826122cb565b611149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612fa3602f913960400191505060405180910390fd5b6009600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611203576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612eda6021913960400191505060405180910390fd5b60011515600a600086815260200190815260200160002060000160149054906101000a900460ff16151514611283576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180612fd26027913960400191505060405180910390fd5b82600a600086815260200190815260200160002060020190805190602001906112ad929190612524565b50837f3656362518e9d021a0cbe191cb6dbfb793313f0ca0d9b237dd9b89e6aff2bb206009600087815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a2837fb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f86009600087815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a260026009600086815260200190815260200160002060000160006101000a81548160ff021916908360058111156114e957fe5b021790555050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b336001151561152882610c4f565b151514611580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061301e602b913960400191505060405180910390fd5b3361158a81611b8a565b6115df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612ff96025913960400191505060405180910390fd5b8360006115ec82826122cb565b611641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612fa3602f913960400191505060405180910390fd5b6009600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359d667a533876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156116fe57600080fd5b505af1158015611712573d6000803e3d6000fd5b50505050505050505050565b6000816001151561172e82610c4f565b151514611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061301e602b913960400191505060405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915050919050565b600081600115156117e182610c4f565b151514611839576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061301e602b913960400191505060405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154915050919050565b336001151561189282610c4f565b1515146118ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061301e602b913960400191505060405180910390fd5b336118f481611b8a565b611949576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612ff96025913960400191505060405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611acd57600080fd5b505af1158015611ae1573d6000803e3d6000fd5b505050506040513d6020811015611af757600080fd5b8101908080519060200190929190505050151514611b60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180613072602d913960400191505060405180910390fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600654600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410159050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4f6e6c79206f776e65722063616e2063616c6c20746869732e0000000000000081525060200191505060405180910390fd5b600060026000815480929190600101919050559050604051806040016040528085815260200184815250600360008381526020019081526020016000206000820151816000015560208201518160010155905050807f901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec18585604051808381526020018281526020019250505060405180910390a28091505092915050565b6000818302905092915050565b6000600254905090565b60008060006002548410611d78576000806000819150809050925092509250611da3565b6000600360008681526020019081526020016000209050600181600001548260010154935093509350505b9193909250565b60008060008060006009600087815260200190815260200160002090508060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010154826002015483600301549450945094509450509193509193565b6000611e15611d4a565b8510611e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b6283d6008310611eb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b610e108210611f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b6000611f158585611d3d565b905060011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611ff857600080fd5b505af115801561200c573d6000803e3d6000fd5b505050506040513d602081101561202257600080fd5b810190808051906020019092919050505015151461208b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806130496029913960400191505060405180910390fd5b600060086000815480929190600101919050559050600086856040516120b0906125a4565b8083815260200182815260200192505050604051809103906000f0801580156120dd573d6000803e3d6000fd5b5090506040518060e00160405280600060058111156120f857fe5b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018781526020018881526020018273ffffffffffffffffffffffffffffffffffffffff168152602001600015158152506009600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600581111561218557fe5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003015560a08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160040160146101000a81548160ff021916908315150217905550905050817fc756dae6c6da0abc4ce6343ee4a6a81c74f1dbbce1ce8a5ca3a765b53203c19f82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2819350505050949350505050565b60008160058111156122d957fe5b6009600085815260200190815260200160002060000160009054906101000a900460ff16600581111561230857fe5b14905092915050565b61231c8160006122cb565b8061232e575061232d8160016122cb565b5b80612340575061233f8160026122cb565b5b612395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612efb602c913960400191505060405180910390fd5b600060096000838152602001908152602001600020905060006123c082600301548360020154611d3d565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561248f57600080fd5b505af11580156124a3573d6000803e3d6000fd5b505050506040513d60208110156124b957600080fd5b810190808051906020019092919050505061251f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180612f486034913960400191505060405180910390fd5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061256557805160ff1916838001178555612593565b82800160010185558215612593579182015b82811115612592578251825591602001919060010190612577565b5b5090506125a091906125b1565b5090565b6108db806125d783390190565b6125d391905b808211156125cf5760008160009055506001016125b7565b5090565b9056fe608060405234801561001057600080fd5b506040516108db3803806108db8339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060146101000a81548160ff021916908360018111156100ac57fe5b0217905550816001819055504260028190555080600381905550816004819055506000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506107bb806101206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806361dcd7ab1161005b57806361dcd7ab1461014a5780638da5cb5b14610168578063c19d93fb146101b2578063c8e7b31d146101de5761007d565b80632a24f46c146100825780634840f2f0146100de57806359d667a5146100fc575b600080fd5b61008a6101fc565b60405180841515151581526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b6100e6610351565b6040518082815260200191505060405180910390f35b6101486004803603604081101561011257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610357565b005b6101526105e2565b6040518082815260200191505060405180910390f35b6101706105e8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101ba61060d565b604051808260018111156101ca57fe5b60ff16815260200191505060405180910390f35b6101e6610620565b6040518082815260200191505060405180910390f35b600080600080600181111561020d57fe5b600060149054906101000a900460ff16600181111561022857fe5b14801561023a57506003546002540142115b1561024857610247610626565b5b600180600181111561025657fe5b600060149054906101000a900460ff16600181111561027157fe5b146102c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806107506036913960400191505060405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166004549450945094505050909192565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610419576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4f6e6c79206f776e65722063616e2063616c6c20746869732e0000000000000081525060200191505060405180910390fd5b6000600181111561042657fe5b600060149054906101000a900460ff16600181111561044157fe5b14801561045357506003546002540142115b1561046157610460610626565b5b600080600181111561046f57fe5b600060149054906101000a900460ff16600181111561048a57fe5b146104e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806107506036913960400191505060405180910390fd5b60015482111561053b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604a815260200180610706604a913960600191505060405180910390fd5b6004548210610595576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001806106d36033913960400191505060405180910390fd5b8160048190555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900460ff1681565b60035481565b6000600181111561063357fe5b600060149054906101000a900460ff16600181111561064e57fe5b141561067d576001600060146101000a81548160ff0219169083600181111561067357fe5b02179055506106d0565b60018081111561068957fe5b600060149054906101000a900460ff1660018111156106a457fe5b14156106cf576001600060146101000a81548160ff021916908360018111156106c957fe5b02179055505b5b56fe53696d706c6541756374696f6e3a20746865726520616c72656164792069732061206c6f7765722075696e742d70726963652e53696d706c6541756374696f6e3a2074686520756e69742d707269636520697320686967686572207468616e20686967686573742074686520637573746f6d657220616363657074656453696d706c6541756374696f6e3a2066756e6374696f6e2063616e6e6f742062652063616c6c65642061742074686973207374617465a2646970667358221220dee3b532f18ac1c66097ad9c2b811a74079353960f60ded38f32262561c8baf364736f6c634300060a00334d61726b65743a206661696c656420746f207061792061207265676973746572206465706f7369744d61746b65743a206f6e6c7920637573746f6d65722063616e20636f6e6669726d4d61726b65743a206e6f74206120737461746520746861742063616e2066726565206c6f636b6564206665654d61746b65743a206f6e6c792070726f76696465722063616e20636f6e6669726d4d61726b65743a206661696c656420746f20726566756e64206c6f636b656420666565206261636b20746f20637573746f6d65724d61726b65743a20746865206164647265737320686164206265656e20726567697374657265644d61746b65743a2066756e6374696f6e2063616e6e6f742062652063616c6c656420617420746869732073746174654d61726b6574efbc9a70726f766964657220686173206e6f7420636f6e6669726d6564207965744d61726b65743a207468652070726f7669646572206973206e6f74207175616c69666965644d61726b65743a20746865206164647265737320686164206e6f74206265656e20726567697374657265646c6f636b20666565206265666f7265206372656174696e67206465706c6f796d656e74206f726465724d61726b65743a206661696c656420746f20726566756e64207468652070726f7669646572206465706f736974a26469706673582212208c15884c21cf0e93b7a25b222a6a0a16967367d7e5b7de7b9133b31d9a8a6e3b64736f6c634300060a0033"

// DeployMarket deploys a new contract, binding an instance of Market to it.
func DeployMarket(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenContractAddress common.Address, _witnessPoolContractAddress common.Address) (common.Address, *types.Transaction, *Market, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketBin), backend, _tokenContractAddress, _witnessPoolContractAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

func AsyncDeployMarket(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend, _tokenContractAddress common.Address, _witnessPoolContractAddress common.Address) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(MarketBin), backend, _tokenContractAddress, _witnessPoolContractAddress)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// Market is an auto generated Go binding around a Solidity contract.
type Market struct {
	MarketCaller     // Read-only binding to the contract
	MarketTransactor // Write-only binding to the contract
	MarketFilterer   // Log filterer for contract events
}

// MarketCaller is an auto generated read-only Go binding around a Solidity contract.
type MarketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketTransactor is an auto generated write-only Go binding around a Solidity contract.
type MarketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type MarketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type MarketSession struct {
	Contract     *Market           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type MarketCallerSession struct {
	Contract *MarketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MarketTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type MarketTransactorSession struct {
	Contract     *MarketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketRaw is an auto generated low-level Go binding around a Solidity contract.
type MarketRaw struct {
	Contract *Market // Generic contract binding to access the raw methods on
}

// MarketCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type MarketCallerRaw struct {
	Contract *MarketCaller // Generic read-only contract binding to access the raw methods on
}

// MarketTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type MarketTransactorRaw struct {
	Contract *MarketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarket creates a new instance of Market, bound to a specific deployed contract.
func NewMarket(address common.Address, backend bind.ContractBackend) (*Market, error) {
	contract, err := bindMarket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// NewMarketCaller creates a new read-only instance of Market, bound to a specific deployed contract.
func NewMarketCaller(address common.Address, caller bind.ContractCaller) (*MarketCaller, error) {
	contract, err := bindMarket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketCaller{contract: contract}, nil
}

// NewMarketTransactor creates a new write-only instance of Market, bound to a specific deployed contract.
func NewMarketTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketTransactor, error) {
	contract, err := bindMarket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketTransactor{contract: contract}, nil
}

// NewMarketFilterer creates a new log filterer instance of Market, bound to a specific deployed contract.
func NewMarketFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketFilterer, error) {
	contract, err := bindMarket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketFilterer{contract: contract}, nil
}

// bindMarket binds a generic wrapper to an already deployed contract.
func bindMarket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Market.Contract.MarketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.MarketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.MarketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Market.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.contract.Transact(opts, method, params...)
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketCaller) CalculateLockFee(opts *bind.CallOpts, _highestUnitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "calculateLockFee", _highestUnitPrice, _faaSDuration)
	return *ret0, err
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketSession) CalculateLockFee(_highestUnitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateLockFee(&_Market.CallOpts, _highestUnitPrice, _faaSDuration)
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faaSDuration) constant returns(uint256)
func (_Market *MarketCallerSession) CalculateLockFee(_highestUnitPrice *big.Int, _faaSDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateLockFee(&_Market.CallOpts, _highestUnitPrice, _faaSDuration)
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) constant returns(address, uint256, uint256, uint256)
func (_Market *MarketCaller) GetDeploymentOrder(opts *bind.CallOpts, _deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Market.contract.Call(opts, out, "getDeploymentOrder", _deploymentOrderID)
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) constant returns(address, uint256, uint256, uint256)
func (_Market *MarketSession) GetDeploymentOrder(_deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	return _Market.Contract.GetDeploymentOrder(&_Market.CallOpts, _deploymentOrderID)
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) constant returns(address, uint256, uint256, uint256)
func (_Market *MarketCallerSession) GetDeploymentOrder(_deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	return _Market.Contract.GetDeploymentOrder(&_Market.CallOpts, _deploymentOrderID)
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _levelID) constant returns(bool, uint256, uint256)
func (_Market *MarketCaller) GetFaaSLevel(opts *bind.CallOpts, _levelID *big.Int) (bool, *big.Int, *big.Int, error) {
	var (
		ret0 = new(bool)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _Market.contract.Call(opts, out, "getFaaSLevel", _levelID)
	return *ret0, *ret1, *ret2, err
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _levelID) constant returns(bool, uint256, uint256)
func (_Market *MarketSession) GetFaaSLevel(_levelID *big.Int) (bool, *big.Int, *big.Int, error) {
	return _Market.Contract.GetFaaSLevel(&_Market.CallOpts, _levelID)
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _levelID) constant returns(bool, uint256, uint256)
func (_Market *MarketCallerSession) GetFaaSLevel(_levelID *big.Int) (bool, *big.Int, *big.Int, error) {
	return _Market.Contract.GetFaaSLevel(&_Market.CallOpts, _levelID)
}

// GetFaaSLevelNumber is a free data retrieval call binding the contract method 0xc7807478.
//
// Solidity: function getFaaSLevelNumber() constant returns(uint256)
func (_Market *MarketCaller) GetFaaSLevelNumber(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "getFaaSLevelNumber")
	return *ret0, err
}

// GetFaaSLevelNumber is a free data retrieval call binding the contract method 0xc7807478.
//
// Solidity: function getFaaSLevelNumber() constant returns(uint256)
func (_Market *MarketSession) GetFaaSLevelNumber() (*big.Int, error) {
	return _Market.Contract.GetFaaSLevelNumber(&_Market.CallOpts)
}

// GetFaaSLevelNumber is a free data retrieval call binding the contract method 0xc7807478.
//
// Solidity: function getFaaSLevelNumber() constant returns(uint256)
func (_Market *MarketCallerSession) GetFaaSLevelNumber() (*big.Int, error) {
	return _Market.Contract.GetFaaSLevelNumber(&_Market.CallOpts)
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) constant returns(uint256)
func (_Market *MarketCaller) GetProviderDeposit(opts *bind.CallOpts, _provider common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "getProviderDeposit", _provider)
	return *ret0, err
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) constant returns(uint256)
func (_Market *MarketSession) GetProviderDeposit(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderDeposit(&_Market.CallOpts, _provider)
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) constant returns(uint256)
func (_Market *MarketCallerSession) GetProviderDeposit(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderDeposit(&_Market.CallOpts, _provider)
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) constant returns(uint256)
func (_Market *MarketCaller) GetProviderReputation(opts *bind.CallOpts, _provider common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "getProviderReputation", _provider)
	return *ret0, err
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) constant returns(uint256)
func (_Market *MarketSession) GetProviderReputation(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderReputation(&_Market.CallOpts, _provider)
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) constant returns(uint256)
func (_Market *MarketCallerSession) GetProviderReputation(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderReputation(&_Market.CallOpts, _provider)
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() constant returns(uint256)
func (_Market *MarketCaller) GetStdProviderDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "getStdProviderDeposit")
	return *ret0, err
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() constant returns(uint256)
func (_Market *MarketSession) GetStdProviderDeposit() (*big.Int, error) {
	return _Market.Contract.GetStdProviderDeposit(&_Market.CallOpts)
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() constant returns(uint256)
func (_Market *MarketCallerSession) GetStdProviderDeposit() (*big.Int, error) {
	return _Market.Contract.GetStdProviderDeposit(&_Market.CallOpts)
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) constant returns(bool)
func (_Market *MarketCaller) IsProviderQualified(opts *bind.CallOpts, _provider common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "isProviderQualified", _provider)
	return *ret0, err
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) constant returns(bool)
func (_Market *MarketSession) IsProviderQualified(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderQualified(&_Market.CallOpts, _provider)
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) constant returns(bool)
func (_Market *MarketCallerSession) IsProviderQualified(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderQualified(&_Market.CallOpts, _provider)
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) constant returns(bool)
func (_Market *MarketCaller) IsProviderRegistered(opts *bind.CallOpts, _provider common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "isProviderRegistered", _provider)
	return *ret0, err
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) constant returns(bool)
func (_Market *MarketSession) IsProviderRegistered(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderRegistered(&_Market.CallOpts, _provider)
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) constant returns(bool)
func (_Market *MarketCallerSession) IsProviderRegistered(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderRegistered(&_Market.CallOpts, _provider)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Market *MarketCallerSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_Market *MarketCaller) TokenContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Market.contract.Call(opts, out, "tokenContract")
	return *ret0, err
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_Market *MarketSession) TokenContract() (common.Address, error) {
	return _Market.Contract.TokenContract(&_Market.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_Market *MarketCallerSession) TokenContract() (common.Address, error) {
	return _Market.Contract.TokenContract(&_Market.CallOpts)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns(uint256)
func (_Market *MarketTransactor) AddFaaSLevel(opts *bind.TransactOpts, _core *big.Int, _mem *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "addFaaSLevel", _core, _mem)
}

func (_Market *MarketTransactor) AsyncAddFaaSLevel(handler func(*types.Receipt, error), opts *bind.TransactOpts, _core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "addFaaSLevel", _core, _mem)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns(uint256)
func (_Market *MarketSession) AddFaaSLevel(_core *big.Int, _mem *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.AddFaaSLevel(&_Market.TransactOpts, _core, _mem)
}

func (_Market *MarketSession) AsyncAddFaaSLevel(handler func(*types.Receipt, error), _core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncAddFaaSLevel(handler, &_Market.TransactOpts, _core, _mem)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns(uint256)
func (_Market *MarketTransactorSession) AddFaaSLevel(_core *big.Int, _mem *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.AddFaaSLevel(&_Market.TransactOpts, _core, _mem)
}

func (_Market *MarketTransactorSession) AsyncAddFaaSLevel(handler func(*types.Receipt, error), _core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncAddFaaSLevel(handler, &_Market.TransactOpts, _core, _mem)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketTransactor) Bid(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "bid", _deploymentOrderID, _unitPrice)
}

func (_Market *MarketTransactor) AsyncBid(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "bid", _deploymentOrderID, _unitPrice)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketSession) Bid(_deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.Bid(&_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

func (_Market *MarketSession) AsyncBid(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncBid(handler, &_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketTransactorSession) Bid(_deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.Bid(&_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

func (_Market *MarketTransactorSession) AsyncBid(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncBid(handler, &_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

// CustomerConfirm is a paid mutator transaction binding the contract method 0x4b535c0f.
//
// Solidity: function customerConfirm(uint256 _deploymentOrderID, string _funcPath) returns()
func (_Market *MarketTransactor) CustomerConfirm(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _funcPath string) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "customerConfirm", _deploymentOrderID, _funcPath)
}

func (_Market *MarketTransactor) AsyncCustomerConfirm(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int, _funcPath string) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "customerConfirm", _deploymentOrderID, _funcPath)
}

// CustomerConfirm is a paid mutator transaction binding the contract method 0x4b535c0f.
//
// Solidity: function customerConfirm(uint256 _deploymentOrderID, string _funcPath) returns()
func (_Market *MarketSession) CustomerConfirm(_deploymentOrderID *big.Int, _funcPath string) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.CustomerConfirm(&_Market.TransactOpts, _deploymentOrderID, _funcPath)
}

func (_Market *MarketSession) AsyncCustomerConfirm(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _funcPath string) (*types.Transaction, error) {
	return _Market.Contract.AsyncCustomerConfirm(handler, &_Market.TransactOpts, _deploymentOrderID, _funcPath)
}

// CustomerConfirm is a paid mutator transaction binding the contract method 0x4b535c0f.
//
// Solidity: function customerConfirm(uint256 _deploymentOrderID, string _funcPath) returns()
func (_Market *MarketTransactorSession) CustomerConfirm(_deploymentOrderID *big.Int, _funcPath string) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.CustomerConfirm(&_Market.TransactOpts, _deploymentOrderID, _funcPath)
}

func (_Market *MarketTransactorSession) AsyncCustomerConfirm(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _funcPath string) (*types.Transaction, error) {
	return _Market.Contract.AsyncCustomerConfirm(handler, &_Market.TransactOpts, _deploymentOrderID, _funcPath)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns(bool)
func (_Market *MarketTransactor) MatchDeploymentOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "matchDeploymentOrder", _deploymentOrderID)
}

func (_Market *MarketTransactor) AsyncMatchDeploymentOrder(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "matchDeploymentOrder", _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns(bool)
func (_Market *MarketSession) MatchDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.MatchDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketSession) AsyncMatchDeploymentOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncMatchDeploymentOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns(bool)
func (_Market *MarketTransactorSession) MatchDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.MatchDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

func (_Market *MarketTransactorSession) AsyncMatchDeploymentOrder(handler func(*types.Receipt, error), _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncMatchDeploymentOrder(handler, &_Market.TransactOpts, _deploymentOrderID)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0xdbd4314f.
//
// Solidity: function newDeploymentOrder(uint256 _faaSLevelID, uint256 _highestUnitPrice, uint256 _faaSDuration, uint256 _biddingDuration) returns(uint256)
func (_Market *MarketTransactor) NewDeploymentOrder(opts *bind.TransactOpts, _faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "newDeploymentOrder", _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

func (_Market *MarketTransactor) AsyncNewDeploymentOrder(handler func(*types.Receipt, error), opts *bind.TransactOpts, _faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "newDeploymentOrder", _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0xdbd4314f.
//
// Solidity: function newDeploymentOrder(uint256 _faaSLevelID, uint256 _highestUnitPrice, uint256 _faaSDuration, uint256 _biddingDuration) returns(uint256)
func (_Market *MarketSession) NewDeploymentOrder(_faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.NewDeploymentOrder(&_Market.TransactOpts, _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

func (_Market *MarketSession) AsyncNewDeploymentOrder(handler func(*types.Receipt, error), _faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncNewDeploymentOrder(handler, &_Market.TransactOpts, _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0xdbd4314f.
//
// Solidity: function newDeploymentOrder(uint256 _faaSLevelID, uint256 _highestUnitPrice, uint256 _faaSDuration, uint256 _biddingDuration) returns(uint256)
func (_Market *MarketTransactorSession) NewDeploymentOrder(_faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.NewDeploymentOrder(&_Market.TransactOpts, _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

func (_Market *MarketTransactorSession) AsyncNewDeploymentOrder(handler func(*types.Receipt, error), _faaSLevelID *big.Int, _highestUnitPrice *big.Int, _faaSDuration *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AsyncNewDeploymentOrder(handler, &_Market.TransactOpts, _faaSLevelID, _highestUnitPrice, _faaSDuration, _biddingDuration)
}

// ProviderConfirm is a paid mutator transaction binding the contract method 0x2b59ca41.
//
// Solidity: function providerConfirm(uint256 _deploymentOrderID, string _endAddr, string _deployServerAddr, string _accessSecretKey) returns()
func (_Market *MarketTransactor) ProviderConfirm(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _endAddr string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "providerConfirm", _deploymentOrderID, _endAddr, _deployServerAddr, _accessSecretKey)
}

func (_Market *MarketTransactor) AsyncProviderConfirm(handler func(*types.Receipt, error), opts *bind.TransactOpts, _deploymentOrderID *big.Int, _endAddr string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "providerConfirm", _deploymentOrderID, _endAddr, _deployServerAddr, _accessSecretKey)
}

// ProviderConfirm is a paid mutator transaction binding the contract method 0x2b59ca41.
//
// Solidity: function providerConfirm(uint256 _deploymentOrderID, string _endAddr, string _deployServerAddr, string _accessSecretKey) returns()
func (_Market *MarketSession) ProviderConfirm(_deploymentOrderID *big.Int, _endAddr string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderConfirm(&_Market.TransactOpts, _deploymentOrderID, _endAddr, _deployServerAddr, _accessSecretKey)
}

func (_Market *MarketSession) AsyncProviderConfirm(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _endAddr string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderConfirm(handler, &_Market.TransactOpts, _deploymentOrderID, _endAddr, _deployServerAddr, _accessSecretKey)
}

// ProviderConfirm is a paid mutator transaction binding the contract method 0x2b59ca41.
//
// Solidity: function providerConfirm(uint256 _deploymentOrderID, string _endAddr, string _deployServerAddr, string _accessSecretKey) returns()
func (_Market *MarketTransactorSession) ProviderConfirm(_deploymentOrderID *big.Int, _endAddr string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderConfirm(&_Market.TransactOpts, _deploymentOrderID, _endAddr, _deployServerAddr, _accessSecretKey)
}

func (_Market *MarketTransactorSession) AsyncProviderConfirm(handler func(*types.Receipt, error), _deploymentOrderID *big.Int, _endAddr string, _deployServerAddr string, _accessSecretKey string) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderConfirm(handler, &_Market.TransactOpts, _deploymentOrderID, _endAddr, _deployServerAddr, _accessSecretKey)
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketTransactor) ProviderLogin(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "providerLogin")
}

func (_Market *MarketTransactor) AsyncProviderLogin(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "providerLogin")
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketSession) ProviderLogin() (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderLogin(&_Market.TransactOpts)
}

func (_Market *MarketSession) AsyncProviderLogin(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderLogin(handler, &_Market.TransactOpts)
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketTransactorSession) ProviderLogin() (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderLogin(&_Market.TransactOpts)
}

func (_Market *MarketTransactorSession) AsyncProviderLogin(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderLogin(handler, &_Market.TransactOpts)
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketTransactor) ProviderLogout(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Market.contract.Transact(opts, "providerLogout")
}

func (_Market *MarketTransactor) AsyncProviderLogout(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.AsyncTransact(opts, handler, "providerLogout")
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketSession) ProviderLogout() (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderLogout(&_Market.TransactOpts)
}

func (_Market *MarketSession) AsyncProviderLogout(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderLogout(handler, &_Market.TransactOpts)
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketTransactorSession) ProviderLogout() (*types.Transaction, *types.Receipt, error) {
	return _Market.Contract.ProviderLogout(&_Market.TransactOpts)
}

func (_Market *MarketTransactorSession) AsyncProviderLogout(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Market.Contract.AsyncProviderLogout(handler, &_Market.TransactOpts)
}

// MarketAuctionEndEventIterator is returned from FilterAuctionEndEvent and is used to iterate over the raw logs and unpacked data for AuctionEndEvent events raised by the Market contract.
type MarketAuctionEndEventIterator struct {
	Event *MarketAuctionEndEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketAuctionEndEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketAuctionEndEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketAuctionEndEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketAuctionEndEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketAuctionEndEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketAuctionEndEvent represents a AuctionEndEvent event raised by the Market contract.
type MarketAuctionEndEvent struct {
	DeploymentOrderID *big.Int
	Success           bool
	Provider          common.Address
	UnitPrice         *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAuctionEndEvent is a free log retrieval operation binding the contract event 0x7621c01b83465196c05b7b0420b555f9b952da7a5168247b5dd4c006ea9be684.
//
// Solidity: event AuctionEndEvent(uint256 indexed _deploymentOrderID, bool _success, address _provider, uint256 _unitPrice)
func (_Market *MarketFilterer) FilterAuctionEndEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketAuctionEndEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "AuctionEndEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketAuctionEndEventIterator{contract: _Market.contract, event: "AuctionEndEvent", logs: logs, sub: sub}, nil
}

// WatchAuctionEndEvent is a free log subscription operation binding the contract event 0x7621c01b83465196c05b7b0420b555f9b952da7a5168247b5dd4c006ea9be684.
//
// Solidity: event AuctionEndEvent(uint256 indexed _deploymentOrderID, bool _success, address _provider, uint256 _unitPrice)
func (_Market *MarketFilterer) WatchAuctionEndEvent(opts *bind.WatchOpts, sink chan<- *MarketAuctionEndEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "AuctionEndEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketAuctionEndEvent)
				if err := _Market.contract.UnpackLog(event, "AuctionEndEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionEndEvent is a log parse operation binding the contract event 0x7621c01b83465196c05b7b0420b555f9b952da7a5168247b5dd4c006ea9be684.
//
// Solidity: event AuctionEndEvent(uint256 indexed _deploymentOrderID, bool _success, address _provider, uint256 _unitPrice)
func (_Market *MarketFilterer) ParseAuctionEndEvent(log types.Log) (*MarketAuctionEndEvent, error) {
	event := new(MarketAuctionEndEvent)
	if err := _Market.contract.UnpackLog(event, "AuctionEndEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketNewDeploymentInfoEventIterator is returned from FilterNewDeploymentInfoEvent and is used to iterate over the raw logs and unpacked data for NewDeploymentInfoEvent events raised by the Market contract.
type MarketNewDeploymentInfoEventIterator struct {
	Event *MarketNewDeploymentInfoEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewDeploymentInfoEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewDeploymentInfoEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewDeploymentInfoEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewDeploymentInfoEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewDeploymentInfoEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewDeploymentInfoEvent represents a NewDeploymentInfoEvent event raised by the Market contract.
type MarketNewDeploymentInfoEvent struct {
	DeploymentOrderID *big.Int
	Customer          common.Address
	Provider          common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewDeploymentInfoEvent is a free log retrieval operation binding the contract event 0x3656362518e9d021a0cbe191cb6dbfb793313f0ca0d9b237dd9b89e6aff2bb20.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) FilterNewDeploymentInfoEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewDeploymentInfoEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewDeploymentInfoEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewDeploymentInfoEventIterator{contract: _Market.contract, event: "NewDeploymentInfoEvent", logs: logs, sub: sub}, nil
}

// WatchNewDeploymentInfoEvent is a free log subscription operation binding the contract event 0x3656362518e9d021a0cbe191cb6dbfb793313f0ca0d9b237dd9b89e6aff2bb20.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) WatchNewDeploymentInfoEvent(opts *bind.WatchOpts, sink chan<- *MarketNewDeploymentInfoEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewDeploymentInfoEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewDeploymentInfoEvent)
				if err := _Market.contract.UnpackLog(event, "NewDeploymentInfoEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDeploymentInfoEvent is a log parse operation binding the contract event 0x3656362518e9d021a0cbe191cb6dbfb793313f0ca0d9b237dd9b89e6aff2bb20.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) ParseNewDeploymentInfoEvent(log types.Log) (*MarketNewDeploymentInfoEvent, error) {
	event := new(MarketNewDeploymentInfoEvent)
	if err := _Market.contract.UnpackLog(event, "NewDeploymentInfoEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketNewDeploymentOrderEventIterator is returned from FilterNewDeploymentOrderEvent and is used to iterate over the raw logs and unpacked data for NewDeploymentOrderEvent events raised by the Market contract.
type MarketNewDeploymentOrderEventIterator struct {
	Event *MarketNewDeploymentOrderEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewDeploymentOrderEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewDeploymentOrderEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewDeploymentOrderEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewDeploymentOrderEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewDeploymentOrderEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewDeploymentOrderEvent represents a NewDeploymentOrderEvent event raised by the Market contract.
type MarketNewDeploymentOrderEvent struct {
	DeploymentOrderID *big.Int
	AuctionAddress    common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewDeploymentOrderEvent is a free log retrieval operation binding the contract event 0xc756dae6c6da0abc4ce6343ee4a6a81c74f1dbbce1ce8a5ca3a765b53203c19f.
//
// Solidity: event NewDeploymentOrderEvent(uint256 indexed _deploymentOrderID, address _auctionAddress)
func (_Market *MarketFilterer) FilterNewDeploymentOrderEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewDeploymentOrderEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewDeploymentOrderEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewDeploymentOrderEventIterator{contract: _Market.contract, event: "NewDeploymentOrderEvent", logs: logs, sub: sub}, nil
}

// WatchNewDeploymentOrderEvent is a free log subscription operation binding the contract event 0xc756dae6c6da0abc4ce6343ee4a6a81c74f1dbbce1ce8a5ca3a765b53203c19f.
//
// Solidity: event NewDeploymentOrderEvent(uint256 indexed _deploymentOrderID, address _auctionAddress)
func (_Market *MarketFilterer) WatchNewDeploymentOrderEvent(opts *bind.WatchOpts, sink chan<- *MarketNewDeploymentOrderEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewDeploymentOrderEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewDeploymentOrderEvent)
				if err := _Market.contract.UnpackLog(event, "NewDeploymentOrderEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDeploymentOrderEvent is a log parse operation binding the contract event 0xc756dae6c6da0abc4ce6343ee4a6a81c74f1dbbce1ce8a5ca3a765b53203c19f.
//
// Solidity: event NewDeploymentOrderEvent(uint256 indexed _deploymentOrderID, address _auctionAddress)
func (_Market *MarketFilterer) ParseNewDeploymentOrderEvent(log types.Log) (*MarketNewDeploymentOrderEvent, error) {
	event := new(MarketNewDeploymentOrderEvent)
	if err := _Market.contract.UnpackLog(event, "NewDeploymentOrderEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketNewLeaseEventIterator is returned from FilterNewLeaseEvent and is used to iterate over the raw logs and unpacked data for NewLeaseEvent events raised by the Market contract.
type MarketNewLeaseEventIterator struct {
	Event *MarketNewLeaseEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewLeaseEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewLeaseEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewLeaseEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewLeaseEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewLeaseEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewLeaseEvent represents a NewLeaseEvent event raised by the Market contract.
type MarketNewLeaseEvent struct {
	DeploymentOrderID *big.Int
	Customer          common.Address
	Provider          common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewLeaseEvent is a free log retrieval operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) FilterNewLeaseEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewLeaseEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewLeaseEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewLeaseEventIterator{contract: _Market.contract, event: "NewLeaseEvent", logs: logs, sub: sub}, nil
}

// WatchNewLeaseEvent is a free log subscription operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) WatchNewLeaseEvent(opts *bind.WatchOpts, sink chan<- *MarketNewLeaseEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewLeaseEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewLeaseEvent)
				if err := _Market.contract.UnpackLog(event, "NewLeaseEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewLeaseEvent is a log parse operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address _customer, address _provider)
func (_Market *MarketFilterer) ParseNewLeaseEvent(log types.Log) (*MarketNewLeaseEvent, error) {
	event := new(MarketNewLeaseEvent)
	if err := _Market.contract.UnpackLog(event, "NewLeaseEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MarketAddFaaSLevelEventIterator is returned from FilterAddFaaSLevelEvent and is used to iterate over the raw logs and unpacked data for AddFaaSLevelEvent events raised by the Market contract.
type MarketAddFaaSLevelEventIterator struct {
	Event *MarketAddFaaSLevelEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketAddFaaSLevelEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketAddFaaSLevelEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketAddFaaSLevelEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketAddFaaSLevelEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketAddFaaSLevelEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketAddFaaSLevelEvent represents a AddFaaSLevelEvent event raised by the Market contract.
type MarketAddFaaSLevelEvent struct {
	Index *big.Int
	Core  *big.Int
	Mem   *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddFaaSLevelEvent is a free log retrieval operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed index, uint256 core, uint256 mem)
func (_Market *MarketFilterer) FilterAddFaaSLevelEvent(opts *bind.FilterOpts, index []*big.Int) (*MarketAddFaaSLevelEventIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "addFaaSLevelEvent", indexRule)
	if err != nil {
		return nil, err
	}
	return &MarketAddFaaSLevelEventIterator{contract: _Market.contract, event: "addFaaSLevelEvent", logs: logs, sub: sub}, nil
}

// WatchAddFaaSLevelEvent is a free log subscription operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed index, uint256 core, uint256 mem)
func (_Market *MarketFilterer) WatchAddFaaSLevelEvent(opts *bind.WatchOpts, sink chan<- *MarketAddFaaSLevelEvent, index []*big.Int) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "addFaaSLevelEvent", indexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketAddFaaSLevelEvent)
				if err := _Market.contract.UnpackLog(event, "addFaaSLevelEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddFaaSLevelEvent is a log parse operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed index, uint256 core, uint256 mem)
func (_Market *MarketFilterer) ParseAddFaaSLevelEvent(log types.Log) (*MarketAddFaaSLevelEvent, error) {
	event := new(MarketAddFaaSLevelEvent)
	if err := _Market.contract.UnpackLog(event, "addFaaSLevelEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}
