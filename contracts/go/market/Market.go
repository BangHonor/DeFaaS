// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package market

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketABI is the input ABI used to generate the binding from.
const MarketABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_faasLevelID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"BiddingEndEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isViolatedSLA\",\"type\":\"bool\"}],\"name\":\"FinishDeploymentOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"funcPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"deployPath\",\"type\":\"string\"}],\"name\":\"NewDeploymentInfoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_faasLevelID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_faasDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_biddingDuration\",\"type\":\"uint256\"}],\"name\":\"NewDeploymentOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"NewLeaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"NewSLAEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_core\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mem\",\"type\":\"uint256\"}],\"name\":\"addFaaSLevelEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_core\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mem\",\"type\":\"uint256\"}],\"name\":\"addFaaSLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faasDuration\",\"type\":\"uint256\"}],\"name\":\"calculateLockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faasDuration\",\"type\":\"uint256\"}],\"name\":\"calculateServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"confirmDeploymentInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"finishDeploymemtOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"fulfillDeploymentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"getDeploymentOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_faasLevelID\",\"type\":\"uint256\"}],\"name\":\"getFaaSLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStdProviderDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProviderQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProviderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"matchDeploymentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faasLevelID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faasDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_funcMsg\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_highestUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_biddingDuration\",\"type\":\"uint256\"}],\"name\":\"newDeploymentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numFaaSLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerLogin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerLogout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_funcPath\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_deployPath\",\"type\":\"string\"}],\"name\":\"publishDeploymentInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"queryLease\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentOrderID\",\"type\":\"uint256\"}],\"name\":\"queryMatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contractFaaSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wpContract\",\"outputs\":[{\"internalType\":\"contractWitnessPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MarketBin is the compiled bytecode used for deploying new contracts.
var MarketBin = "0x60806040523480156200001157600080fd5b506040516200982f3803806200982f83398181016040528101906200003791906200031f565b8080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506000600281905550620000d86001610200620001cc60201b60201c565b620000ed6001610400620001cc60201b60201c565b620001026001610800620001cc60201b60201c565b620001176002610400620001cc60201b60201c565b6200012c6004610800620001cc60201b60201c565b6000600481905550600580819055506005600681905550506000600981905550806040516200015b90620002fa565b62000167919062000394565b604051809103906000f08015801562000184573d6000803e3d6000fd5b50600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200050f565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200025d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025490620003b1565b60405180910390fd5b60006002600081548092919062000274906200044f565b919050559050604051806040016040528084815260200183815250600360008381526020019081526020016000206000820151816000015560208201518160010155905050807f901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec18484604051620002ed929190620003d3565b60405180910390a2505050565b613fa4806200588b83390190565b6000815190506200031981620004f5565b92915050565b6000602082840312156200033257600080fd5b6000620003428482850162000308565b91505092915050565b620003568162000411565b82525050565b60006200036b60198362000400565b91506200037882620004cc565b602082019050919050565b6200038e8162000445565b82525050565b6000602082019050620003ab60008301846200034b565b92915050565b60006020820190508181036000830152620003cc816200035c565b9050919050565b6000604082019050620003ea600083018562000383565b620003f9602083018462000383565b9392505050565b600082825260208201905092915050565b60006200041e8262000425565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200045c8262000445565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200049257620004916200049d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f6e6c79206f776e65722063616e2063616c6c20746869732e00000000000000600082015250565b620005008162000411565b81146200050c57600080fd5b50565b61536c806200051f6000396000f3fe60806040523480156200001157600080fd5b5060043610620001965760003560e01c806380f60d2b11620000f3578063acd3dce311620000a5578063c0b717c0116200007b578063c0b717c014620004b8578063c4c1e49314620004d8578063c86fdf7d146200050e578063ce67ca0314620005455762000196565b8063acd3dce31462000440578063b82964711462000462578063b8f9898f14620004985762000196565b806380f60d2b146200037a57806385c82b25146200039a578063884eacb814620003ba5780638da5cb5b14620003c657806390bceb2414620003e85780639a599201146200041e5762000196565b80634cef003e116200014d5780634cef003e146200027557806355a373d61462000295578063598647f814620002b757806361bb20f014620002d757806365d31c38146200030d578063729d98e914620003445762000196565b806318f645fa146200019b5780631b5360cd14620001bb5780631c0d3ebd14620001f15780631ead914e1462000213578063270d9b4214620002495780632bf355701462000269575b600080fd5b620001b96004803603810190620001b39190620030a2565b6200057e565b005b620001d96004803603810190620001d39190620030a2565b620009ce565b604051620001e8919062003727565b60405180910390f35b620001fb62000a44565b6040516200020a919062003a1d565b60405180910390f35b6200023160048036038101906200022b919062002ff4565b62000a4e565b60405162000240919062003727565b60405180910390f35b62000267600480360381019062000261919062003197565b62000a9c565b005b6200027362000eea565b005b6200029360048036038101906200028d9190620030ce565b62001116565b005b6200029f6200132e565b604051620002ae919062003744565b60405180910390f35b620002d56004803603810190620002cf919062003156565b62001354565b005b620002f56004803603810190620002ef919062002ff4565b62001540565b60405162000304919062003a1d565b60405180910390f35b6200032b6004803603810190620003259190620030a2565b620015e2565b6040516200033b92919062003643565b60405180910390f35b6200036260048036038101906200035c919062002ff4565b620016b1565b60405162000371919062003a1d565b60405180910390f35b620003986004803603810190620003929190620030a2565b62001753565b005b620003b86004803603810190620003b29190620030a2565b62001b48565b005b620003c462002315565b005b620003d062002592565b604051620003df919062003626565b60405180910390f35b62000406600480360381019062000400919062003156565b620025b6565b60405162000415919062003a1d565b60405180910390f35b62000428620025fa565b60405162000437919062003a1d565b60405180910390f35b6200044a62002600565b60405162000459919062003761565b60405180910390f35b6200048060048036038101906200047a919062002ff4565b62002626565b6040516200048f919062003727565b60405180910390f35b620004b66004803603810190620004b09190620030a2565b62002677565b005b620004d66004803603810190620004d0919062003156565b62002931565b005b620004f66004803603810190620004f0919062003156565b62002a5f565b60405162000505919062003a1d565b60405180910390f35b6200052c6004803603810190620005269190620030a2565b62002a83565b6040516200053c92919062003a3a565b60405180910390f35b6200056360048036038101906200055d9190620030a2565b62002afa565b604051620005759493929190620036da565b60405180910390f35b806009548110620005c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005bd9062003863565b60405180910390fd5b816000620005d5828262002ba4565b62000617576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200060e9062003973565b60405180910390fd5b6000600a600086815260200190815260200160002090506000806000600a600089815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a24f46c6040518163ffffffff1660e01b8152600401606060405180830381600087803b158015620006b257600080fd5b505af1158015620006c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ed91906200304c565b8093508194508295505050508215158273ffffffffffffffffffffffffffffffffffffffff16897ffb7ebde163245591a20fe6c28c03b154a1e962ced30f0a1539543408e39caca58760010154856040516200074b92919062003a3a565b60405180910390a46000151583151514156200080b576004600a60008a815260200190815260200160002060000160006101000a81548160ff02191690836004811115620007c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506000600a60008a815260200190815260200160002060050160146101000a81548160ff021916908315150217905550620008018862002c46565b50505050620009c8565b6001600a60008a815260200190815260200160002060050160146101000a81548160ff0219169083151502179055506040518060a001604052808281526020016000151581526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815260200160405180602001604052806000815250815250600b60008a81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020190805190602001906200093a92919062002e51565b5060808201518160030190805190602001906200095992919062002e51565b509050506001600a60008a815260200190815260200160002060000160006101000a81548160ff02191690836004811115620009be577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550505050505b50505050565b600081600954811062000a18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a0f9062003863565b60405180910390fd5b600a600084815260200190815260200160002060050160149054906101000a900460ff16915050919050565b6000600454905090565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154119050919050565b84600254811062000ae4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000adb90620038a7565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333062000b30878a62002a5f565b6040518463ffffffff1660e01b815260040162000b509392919062003670565b602060405180830381600087803b15801562000b6b57600080fd5b505af115801562000b80573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ba6919062003020565b62000be8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000bdf906200381f565b60405180910390fd5b60006009600081548092919062000bff9062003e14565b9190505590506000848460405162000c179062002ee2565b62000c2492919062003a3a565b604051809103906000f08015801562000c41573d6000803e3d6000fd5b5090506040518061010001604052806000600481111562000c8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018781526020018681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600a600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600481111562000d4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020155608082015181600301908051906020019062000dca92919062002e51565b5060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a81548160ff0219169083151502179055509050506000600a60008481526020019081526020016000209050828a8260000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff4c3705c6e612c94165e537fa729b4c04ec7479c1ea185bd9f5ba2594e812b3f8460010154856004015486600201548b60405162000ed6949392919062003abb565b60405180910390a450505050505050505050565b336000151562000efa8262000a4e565b15151462000f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f36906200392f565b60405180910390fd5b600454600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600554600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518463ffffffff1660e01b8152600401620010789392919062003670565b602060405180830381600087803b1580156200109357600080fd5b505af1158015620010a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010ce919062003020565b15151462001113576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200110a90620037fd565b60405180910390fd5b50565b8260095481106200115e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011559062003863565b60405180910390fd5b8360016200116d828262002ba4565b620011af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011a69062003973565b60405180910390fd5b6000600b600088815260200190815260200160002090508060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200125b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012529062003951565b60405180910390fd5b858160020190805190602001906200127592919062002e51565b50848160030190805190602001906200129092919062002e51565b5060018160010160006101000a81548160ff0219169083151502179055508060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16877fd59c40916276fe9f586bc2609c28b14042848eb9a3bd25616762dff66100810488886040516200131d9291906200377e565b60405180910390a350505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8160095481106200139c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013939062003863565b60405180910390fd5b3360011515620013ac8262000a4e565b151514620013f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013e890620039d9565b60405180910390fd5b33620013fd8162002626565b6200143f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200143690620039b7565b60405180910390fd5b8460006200144e828262002ba4565b62001490576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620014879062003973565b60405180910390fd5b600a600088815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359d667a533886040518363ffffffff1660e01b815260040162001503929190620036ad565b600060405180830381600087803b1580156200151e57600080fd5b505af115801562001533573d6000803e3d6000fd5b5050505050505050505050565b60008160011515620015528262000a4e565b15151462001597576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200158e90620039d9565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915050919050565b6000808260095481106200162d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016249062003863565b60405180910390fd5b6000600a600086815260200190815260200160002090506000600b600087815260200190815260200160002090508160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694509450505050915091565b60008160011515620016c38262000a4e565b15151462001708576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016ff90620039d9565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154915050919050565b8060095481106200179b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017929062003863565b60405180910390fd5b816001620017aa828262002ba4565b620017ec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017e39062003973565b60405180910390fd5b600a600085815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001893576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200188a9062003841565b60405180910390fd5b60011515600b600086815260200190815260200160002060010160009054906101000a900460ff1615151462001900576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018f790620038c9565b60405180910390fd5b6000600a600086815260200190815260200160002090506000600b600087815260200190815260200160002090506000620019448360040154846002015462002a5f565b905060006200195c83600001548560020154620025b6565b9050600081836200196e919062003c8e565b9050600080818462001981919062003c8e565b905060008190506040518060e001604052808381526020018581526020018281526020018481526020016000815260200160001515815260200143815250600c60008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c082015181600601559050508660010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168860000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168d7fb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f860405160405180910390a46002600a60008e815260200190815260200160002060000160006101000a81548160ff0219169083600481111562001b35577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550505050505050505050505050565b80600954811062001b90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b879062003863565b60405180910390fd5b81600362001b9f828262002ba4565b62001be1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001bd89062003973565b60405180910390fd5b6000600a600086815260200190815260200160002090506000600b600087815260200190815260200160002090506000600c600088815260200190815260200160002090508260020154816004015462001c3c919062003b98565b421162001c80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001c77906200390d565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c72645b1886040518263ffffffff1660e01b815260040162001cdd919062003a1d565b600060405180830381600087803b15801562001cf857600080fd5b505af115801562001d0d573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e81bc992886040518263ffffffff1660e01b815260040162001d6e919062003a1d565b60206040518083038186803b15801562001d8757600080fd5b505afa15801562001d9c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dc2919062003020565b8160050160006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3083600301546040518363ffffffff1660e01b815260040162001e40929190620036ad565b602060405180830381600087803b15801562001e5b57600080fd5b505af115801562001e70573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e96919062003020565b62001ed8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ecf9062003995565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600101546040518363ffffffff1660e01b815260040162001f5f929190620036ad565b602060405180830381600087803b15801562001f7a57600080fd5b505af115801562001f8f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001fb5919062003020565b62001ff7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001fee9062003995565b60405180910390fd5b600115158160050160009054906101000a900460ff16151514156200213b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8460000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600201546040518363ffffffff1660e01b81526004016200209d929190620036ad565b602060405180830381600087803b158015620020b857600080fd5b505af1158015620020cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020f3919062003020565b62002135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200212c9062003995565b60405180910390fd5b6200225b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600001546040518363ffffffff1660e01b8152600401620021c2929190620036ad565b602060405180830381600087803b158015620021dd57600080fd5b505af1158015620021f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002218919062003020565b6200225a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620022519062003995565b60405180910390fd5b5b6004600a600089815260200190815260200160002060000160006101000a81548160ff02191690836004811115620022bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550867fbc5f0c1789a28272d5f33803afe7fe389319da303c28b0f1eaaf46b93d4a7f4e8260050160009054906101000a900460ff1660405162002304919062003727565b60405180910390a250505050505050565b3360011515620023258262000a4e565b1515146200236a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200236190620039d9565b60405180910390fd5b33620023768162002626565b620023b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620023af90620039b7565b60405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060011515600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401620024f2929190620036ad565b602060405180830381600087803b1580156200250d57600080fd5b505af115801562002522573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002548919062003020565b1515146200258d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200258490620039fb565b60405180910390fd5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e106001610e1084620025cd919062003b98565b620025d9919062003c8e565b620025e5919062003bf5565b83620025f2919062003c2d565b905092915050565b60025481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600654600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410159050919050565b806009548110620026bf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620026b69062003863565b60405180910390fd5b816002620026ce828262002ba4565b62002710576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620027079062003973565b60405180910390fd5b6000600a600086815260200190815260200160002090506000600b600087815260200190815260200160002090506000600c600088815260200190815260200160002090508160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620027ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620027e190620037b9565b60405180910390fd5b428160040181905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e235c6b68260060154898560020187600201546040518563ffffffff1660e01b815260040162002861949392919062003a67565b600060405180830381600087803b1580156200287c57600080fd5b505af115801562002891573d6000803e3d6000fd5b50505050867f8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a60405160405180910390a26003600a600089815260200190815260200160002060000160006101000a81548160ff0219169083600481111562002923577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620029c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620029b990620037db565b60405180910390fd5b600060026000815480929190620029d99062003e14565b919050559050604051806040016040528084815260200183815250600360008381526020019081526020016000206000820151816000015560208201518160010155905050807f901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1848460405162002a5292919062003a3a565b60405180910390a2505050565b600062002a6d8383620025b6565b600262002a7b919062003c2d565b905092915050565b60008082600254811062002ace576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002ac590620038a7565b60405180910390fd5b600060036000868152602001908152602001600020905080600001548160010154935093505050915091565b60008060008084600954811062002b48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002b3f9062003863565b60405180910390fd5b6000600a600088815260200190815260200160002090508060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001015482600201548360040154955095509550955050509193509193565b600081600481111562002be0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600a600085815260200190815260200160002060000160009054906101000a900460ff16600481111562002c3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905092915050565b80600954811062002c8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002c859062003863565b60405180910390fd5b62002c9b82600062002ba4565b8062002cb0575062002caf82600162002ba4565b5b8062002cc5575062002cc482600262002ba4565b5b62002d07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002cfe9062003885565b60405180910390fd5b6000600a60008481526020019081526020016000209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662002d958460040154856002015462002a5f565b6040518363ffffffff1660e01b815260040162002db4929190620036ad565b602060405180830381600087803b15801562002dcf57600080fd5b505af115801562002de4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e0a919062003020565b62002e4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002e4390620038eb565b60405180910390fd5b505050565b82805462002e5f9062003da8565b90600052602060002090601f01602090048101928262002e83576000855562002ecf565b82601f1062002e9e57805160ff191683800117855562002ecf565b8280016001018555821562002ecf579182015b8281111562002ece57825182559160200191906001019062002eb1565b5b50905062002ede919062002ef0565b5090565b610ee9806200444e83390190565b5b8082111562002f0b57600081600090555060010162002ef1565b5090565b600062002f2662002f208462003b31565b62003b08565b90508281526020810184848401111562002f3f57600080fd5b62002f4c84828562003d63565b509392505050565b60008135905062002f6581620043ff565b92915050565b60008151905062002f7c81620043ff565b92915050565b60008151905062002f938162004419565b92915050565b600082601f83011262002fab57600080fd5b813562002fbd84826020860162002f0f565b91505092915050565b60008135905062002fd78162004433565b92915050565b60008151905062002fee8162004433565b92915050565b6000602082840312156200300757600080fd5b6000620030178482850162002f54565b91505092915050565b6000602082840312156200303357600080fd5b6000620030438482850162002f82565b91505092915050565b6000806000606084860312156200306257600080fd5b6000620030728682870162002f82565b9350506020620030858682870162002f6b565b9250506040620030988682870162002fdd565b9150509250925092565b600060208284031215620030b557600080fd5b6000620030c58482850162002fc6565b91505092915050565b600080600060608486031215620030e457600080fd5b6000620030f48682870162002fc6565b935050602084013567ffffffffffffffff8111156200311257600080fd5b620031208682870162002f99565b925050604084013567ffffffffffffffff8111156200313e57600080fd5b6200314c8682870162002f99565b9150509250925092565b600080604083850312156200316a57600080fd5b60006200317a8582860162002fc6565b92505060206200318d8582860162002fc6565b9150509250929050565b60008060008060008060c08789031215620031b157600080fd5b6000620031c189828a0162002fc6565b9650506020620031d489828a0162002fc6565b9550506040620031e789828a0162002fc6565b945050606087013567ffffffffffffffff8111156200320557600080fd5b6200321389828a0162002f99565b93505060806200322689828a0162002fc6565b92505060a06200323989828a0162002fc6565b9150509295509295509295565b620032518162003cc9565b82525050565b620032628162003cdd565b82525050565b620032738162003d13565b82525050565b620032848162003d3b565b82525050565b6000620032978262003b7c565b620032a3818562003b87565b9350620032b581856020860162003d72565b620032c08162003f1e565b840191505092915050565b60008154620032da8162003da8565b620032e6818662003b87565b9450600182166000811462003304576001811462003317576200334e565b60ff19831686526020860193506200334e565b620033228562003b67565b60005b83811015620033465781548189015260018201915060208101905062003325565b808801955050505b50505092915050565b60006200336660268362003b87565b9150620033738262003f2f565b604082019050919050565b60006200338d60198362003b87565b91506200339a8262003f7e565b602082019050919050565b6000620033b460288362003b87565b9150620033c18262003fa7565b604082019050919050565b6000620033db603b8362003b87565b9150620033e88262003ff6565b604082019050919050565b60006200340260218362003b87565b91506200340f8262004045565b604082019050919050565b60006200342960238362003b87565b9150620034368262004094565b604082019050919050565b600062003450602c8362003b87565b91506200345d82620040e3565b604082019050919050565b600062003477601f8362003b87565b9150620034848262004132565b602082019050919050565b60006200349e60268362003b87565b9150620034ab826200415b565b604082019050919050565b6000620034c560348362003b87565b9150620034d282620041aa565b604082019050919050565b6000620034ec60208362003b87565b9150620034f982620041f9565b602082019050919050565b60006200351360278362003b87565b9150620035208262004222565b604082019050919050565b60006200353a60388362003b87565b9150620035478262004271565b604082019050919050565b600062003561602f8362003b87565b91506200356e82620042c0565b604082019050919050565b60006200358860008362003b87565b915062003595826200430f565b600082019050919050565b6000620035af60258362003b87565b9150620035bc8262004312565b604082019050919050565b6000620035d6602b8362003b87565b9150620035e38262004361565b604082019050919050565b6000620035fd602d8362003b87565b91506200360a82620043b0565b604082019050919050565b620036208162003d09565b82525050565b60006020820190506200363d600083018462003246565b92915050565b60006040820190506200365a600083018562003246565b62003669602083018462003246565b9392505050565b600060608201905062003687600083018662003246565b62003696602083018562003246565b620036a5604083018462003615565b949350505050565b6000604082019050620036c4600083018562003246565b620036d3602083018462003615565b9392505050565b6000608082019050620036f1600083018762003246565b62003700602083018662003615565b6200370f604083018562003615565b6200371e606083018462003615565b95945050505050565b60006020820190506200373e600083018462003257565b92915050565b60006020820190506200375b600083018462003268565b92915050565b600060208201905062003778600083018462003279565b92915050565b600060408201905081810360008301526200379a81856200328a565b90508181036020830152620037b081846200328a565b90509392505050565b60006020820190508181036000830152620037d48162003357565b9050919050565b60006020820190508181036000830152620037f6816200337e565b9050919050565b600060208201905081810360008301526200381881620033a5565b9050919050565b600060208201905081810360008301526200383a81620033cc565b9050919050565b600060208201905081810360008301526200385c81620033f3565b9050919050565b600060208201905081810360008301526200387e816200341a565b9050919050565b60006020820190508181036000830152620038a08162003441565b9050919050565b60006020820190508181036000830152620038c28162003468565b9050919050565b60006020820190508181036000830152620038e4816200348f565b9050919050565b600060208201905081810360008301526200390681620034b6565b9050919050565b600060208201905081810360008301526200392881620034dd565b9050919050565b600060208201905081810360008301526200394a8162003504565b9050919050565b600060208201905081810360008301526200396c816200352b565b9050919050565b600060208201905081810360008301526200398e8162003552565b9050919050565b60006020820190508181036000830152620039b08162003579565b9050919050565b60006020820190508181036000830152620039d281620035a0565b9050919050565b60006020820190508181036000830152620039f481620035c7565b9050919050565b6000602082019050818103600083015262003a1681620035ee565b9050919050565b600060208201905062003a34600083018462003615565b92915050565b600060408201905062003a51600083018562003615565b62003a60602083018462003615565b9392505050565b600060808201905062003a7e600083018762003615565b62003a8d602083018662003615565b818103604083015262003aa18185620032cb565b905062003ab2606083018462003615565b95945050505050565b600060808201905062003ad2600083018762003615565b62003ae1602083018662003615565b62003af0604083018562003615565b62003aff606083018462003615565b95945050505050565b600062003b1462003b27565b905062003b22828262003dde565b919050565b6000604051905090565b600067ffffffffffffffff82111562003b4f5762003b4e62003eef565b5b62003b5a8262003f1e565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600062003ba58262003d09565b915062003bb28362003d09565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562003bea5762003be962003e62565b5b828201905092915050565b600062003c028262003d09565b915062003c0f8362003d09565b92508262003c225762003c2162003e91565b5b828204905092915050565b600062003c3a8262003d09565b915062003c478362003d09565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562003c835762003c8262003e62565b5b828202905092915050565b600062003c9b8262003d09565b915062003ca88362003d09565b92508282101562003cbe5762003cbd62003e62565b5b828203905092915050565b600062003cd68262003ce9565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062003d208262003d27565b9050919050565b600062003d348262003ce9565b9050919050565b600062003d488262003d4f565b9050919050565b600062003d5c8262003ce9565b9050919050565b82818337600083830152505050565b60005b8381101562003d9257808201518184015260208101905062003d75565b8381111562003da2576000848401525b50505050565b6000600282049050600182168062003dc157607f821691505b6020821081141562003dd85762003dd762003ec0565b5b50919050565b62003de98262003f1e565b810181811067ffffffffffffffff8211171562003e0b5762003e0a62003eef565b5b80604052505050565b600062003e218262003d09565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562003e575762003e5662003e62565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4d61746b65743a206f6e6c792070726f76696465722063616e2063616c6c206660008201527f756c66696c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732e00000000000000600082015250565b7f4d61726b65743a206661696c656420746f20706179206120726567697374657260008201527f206465706f736974000000000000000000000000000000000000000000000000602082015250565b7f4d61726b65743a206661696c656420746f206c6f636b20666565206265666f7260008201527f65206372656174696e67206465706c6f796d656e74206f726465720000000000602082015250565b7f4d61726b65743a206f6e6c7920637573746f6d65722063616e20636f6e66697260008201527f6d00000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d61726b65743a20696e76616c6964206465706c6f796d656e74206f7264657260008201527f2049440000000000000000000000000000000000000000000000000000000000602082015250565b7f4d61726b65743a206e6f74206120737461746520746861742063616e2066726560008201527f65206c6f636b6564206665650000000000000000000000000000000000000000602082015250565b7f466161534c6576656c3a20696e76616c696420666161736c6576656c20494400600082015250565b7f4d61726b65743a2070726f766964657220686173206e6f7420636f6e6669726d60008201527f6564207965740000000000000000000000000000000000000000000000000000602082015250565b7f4d61726b65743a206661696c656420746f20726566756e64206c6f636b65642060008201527f666565206261636b20746f20637573746f6d6572000000000000000000000000602082015250565b7f4d61746b65743a2046616153206973207374696c6c2066756c66696c6c696e67600082015250565b7f4d61726b65743a20746865206164647265737320686164206265656e2072656760008201527f6973746572656400000000000000000000000000000000000000000000000000602082015250565b7f4d61746b65743a206f6e6c792070726f76696465722063616e207075626c697360008201527f68206465706c6f796d656e7420696e666f726d6174696f6e0000000000000000602082015250565b7f4d61746b65743a2066756e6374696f6e2063616e6e6f742062652063616c6c6560008201527f6420617420746869732073746174650000000000000000000000000000000000602082015250565b50565b7f4d61726b65743a207468652070726f7669646572206973206e6f74207175616c60008201527f6966696564000000000000000000000000000000000000000000000000000000602082015250565b7f4d61726b65743a20746865206164647265737320686164206e6f74206265656e60008201527f2072656769737465726564000000000000000000000000000000000000000000602082015250565b7f4d61726b65743a206661696c656420746f20726566756e64207468652070726f60008201527f7669646572206465706f73697400000000000000000000000000000000000000602082015250565b6200440a8162003cc9565b81146200441657600080fd5b50565b620044248162003cdd565b81146200443057600080fd5b50565b6200443e8162003d09565b81146200444a57600080fd5b5056fe608060405234801561001057600080fd5b50604051610ee9380380610ee98339818101604052810190610032919061013c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060146101000a81548160ff021916908360018111156100bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550816001819055504260028190555080600381905550816004819055506000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610199565b60008151905061013681610182565b92915050565b6000806040838503121561014f57600080fd5b600061015d85828601610127565b925050602061016e85828601610127565b9150509250929050565b6000819050919050565b61018b81610178565b811461019657600080fd5b50565b610d41806101a86000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806361dcd7ab1161005b57806361dcd7ab146100dc5780638da5cb5b146100fa578063c19d93fb14610118578063c8e7b31d146101365761007d565b80632a24f46c146100825780634840f2f0146100a257806359d667a5146100c0575b600080fd5b61008a610154565b6040516100999392919061096e565b60405180910390f35b6100aa610350565b6040516100b79190610a40565b60405180910390f35b6100da60048036038101906100d5919061084f565b610356565b005b6100e4610628565b6040516100f19190610a40565b60405180910390f35b61010261062e565b60405161010f9190610953565b60405180910390f35b610120610652565b60405161012d91906109a5565b60405180910390f35b61013e610665565b60405161014b9190610a40565b60405180910390f35b6000806000806001811115610192577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060149054906101000a900460ff1660018111156101da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1480156101f557506003546002546101f29190610a6c565b42115b156102035761020261066b565b5b600180600181111561023e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060149054906101000a900460ff166001811115610286577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146102c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd90610a20565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166004549450945094505050909192565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103db906109c0565b60405180910390fd5b6000600181111561041e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060149054906101000a900460ff166001811115610466577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b148015610481575060035460025461047e9190610a6c565b42115b1561048f5761048e61066b565b5b60008060018111156104ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060149054906101000a900460ff166001811115610512577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610a20565b60405180910390fd5b600154821115610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058e90610a00565b60405180910390fd5b60045482106105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d2906109e0565b60405180910390fd5b8160048190555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60025481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900460ff1681565b60035481565b600060018111156106a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060149054906101000a900460ff1660018111156106ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610749576001600060146101000a81548160ff0219169083600181111561073f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550610823565b600180811115610782577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060149054906101000a900460ff1660018111156107ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610822576001600060146101000a81548160ff0219169083600181111561081c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055505b5b565b60008135905061083481610cdd565b92915050565b60008135905061084981610cf4565b92915050565b6000806040838503121561086257600080fd5b600061087085828601610825565b92505060206108818582860161083a565b9150509250929050565b61089481610ac2565b82525050565b6108a381610ad4565b82525050565b6108b281610b1d565b82525050565b60006108c5601983610a5b565b91506108d082610b8d565b602082019050919050565b60006108e8603383610a5b565b91506108f382610bb6565b604082019050919050565b600061090b604a83610a5b565b915061091682610c05565b606082019050919050565b600061092e603683610a5b565b915061093982610c7a565b604082019050919050565b61094d81610b13565b82525050565b6000602082019050610968600083018461088b565b92915050565b6000606082019050610983600083018661089a565b610990602083018561088b565b61099d6040830184610944565b949350505050565b60006020820190506109ba60008301846108a9565b92915050565b600060208201905081810360008301526109d9816108b8565b9050919050565b600060208201905081810360008301526109f9816108db565b9050919050565b60006020820190508181036000830152610a19816108fe565b9050919050565b60006020820190508181036000830152610a3981610921565b9050919050565b6000602082019050610a556000830184610944565b92915050565b600082825260208201905092915050565b6000610a7782610b13565b9150610a8283610b13565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ab757610ab6610b2f565b5b828201905092915050565b6000610acd82610af3565b9050919050565b60008115159050919050565b6000819050610aee82610cc9565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b2882610ae0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4f6e6c79206f776e65722063616e2063616c6c20746869732e00000000000000600082015250565b7f53696d706c6541756374696f6e3a20746865726520616c72656164792069732060008201527f61206c6f7765722075696e742d70726963652e00000000000000000000000000602082015250565b7f53696d706c6541756374696f6e3a2074686520756e69742d707269636520697360008201527f20686967686572207468616e20686967686573742074686520637573746f6d6560208201527f7220616363657074656400000000000000000000000000000000000000000000604082015250565b7f53696d706c6541756374696f6e3a2066756e6374696f6e2063616e6e6f74206260008201527f652063616c6c6564206174207468697320737461746500000000000000000000602082015250565b60028110610cda57610cd9610b5e565b5b50565b610ce681610ac2565b8114610cf157600080fd5b50565b610cfd81610b13565b8114610d0857600080fd5b5056fea264697066735822122025f1feb77a267b399465de5467cb3cb608a9d5e8bfa2da2bb9a0ae75da418f2d64736f6c63430008010033a2646970667358221220ec798dbc30195214af873b5189c7efb962b05c78a59cf54afd80910b47adcc9864736f6c634300080100336080604052600060025560646003556064600455600a6009556000600a556001600b556001600c556001600d556003600e556002600f5560026010553480156200004857600080fd5b5060405162003fa438038062003fa483398181016040528101906200006e919062000119565b8080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506000600581905550505062000193565b600081519050620001138162000179565b92915050565b6000602082840312156200012c57600080fd5b60006200013c8482850162000102565b91505092915050565b6000620001528262000159565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001848162000145565b81146200019057600080fd5b50565b613e0180620001a36000396000f3fe608060405234801561001057600080fd5b50600436106101fa5760003560e01c80638da5cb5b1161011a578063cf617762116100ad578063e81bc9921161007c578063e81bc99214610573578063ebe47110146105a3578063ecc7e64b146105ad578063ed062567146105b7578063f11ad7f0146105e7576101fa565b8063cf617762146104db578063d446fcdd1461050b578063d7e654661461053b578063e235c6b614610557576101fa565b8063bc51d77e116100e9578063bc51d77e14610441578063c72645b114610471578063cc83c0341461048d578063cda28864146104ab576101fa565b80638da5cb5b146103df5780639e1a50f6146103fd5780639faa79e314610419578063a35da30c14610423576101fa565b806347ff3aba116101925780637af6fc2a116101615780637af6fc2a146103695780637f5de7851461038757806389640b58146103a357806389be6f46146103c1576101fa565b806347ff3aba146102df57806355a373d61461030f578063744c2e331461032d578063746ea9c61461034b576101fa565b80633ba7e8a5116101ce5780633ba7e8a5146102635780633f5307c41461028157806340f2682f1461029f578063426f93b1146102d5576101fa565b80627ec1ae146101ff578063029c4b561461021d57806316c3734d1461023b5780632fba9d1a14610259575b600080fd5b610207610605565b60405161021491906133f4565b60405180910390f35b61022561060b565b60405161023291906133f4565b60405180910390f35b6102436106a4565b60405161025091906133f4565b60405180910390f35b6102616106aa565b005b61026b61094d565b60405161027891906133f4565b60405180910390f35b610289610953565b60405161029691906133f4565b60405180910390f35b6102b960048036038101906102b49190612b99565b610959565b6040516102cc979695949392919061317e565b60405180910390f35b6102dd610a4a565b005b6102f960048036038101906102f49190612b34565b610d54565b6040516103069190613148565b60405180910390f35b610317610e20565b6040516103249190613163565b60405180910390f35b610335610e46565b60405161034291906133f4565b60405180910390f35b610353610e4c565b60405161036091906133f4565b60405180910390f35b610371610e52565b60405161037e91906133f4565b60405180910390f35b6103a1600480360381019061039c9190612b99565b610e58565b005b6103ab61138c565b6040516103b891906133f4565b60405180910390f35b6103c9611392565b6040516103d691906133f4565b60405180910390f35b6103e7611398565b6040516103f491906130ab565b60405180910390f35b61041760048036038101906104129190612b99565b6113bc565b005b61042161151e565b005b61042b611823565b60405161043891906133f4565b60405180910390f35b61045b60048036038101906104569190612cf1565b611829565b6040516104689190613126565b60405180910390f35b61048b60048036038101906104869190612b99565b611c0e565b005b610495611d82565b6040516104a291906133f4565b60405180910390f35b6104c560048036038101906104c09190612c3a565b611d88565b6040516104d29190613148565b60405180910390f35b6104f560048036038101906104f09190612b0b565b611e28565b6040516105029190613148565b60405180910390f35b61052560048036038101906105209190612b0b565b611e79565b6040516105329190613148565b60405180910390f35b61055560048036038101906105509190612bfe565b611ed2565b005b610571600480360381019061056c9190612c76565b612197565b005b61058d60048036038101906105889190612b99565b612492565b60405161059a9190613148565b60405180910390f35b6105ab61255d565b005b6105b56126fb565b005b6105d160048036038101906105cc9190612bc2565b612849565b6040516105de9190613148565b60405180910390f35b6105ef6128be565b6040516105fc91906133f4565b60405180910390f35b60105481565b60006001151561061a33611e79565b15151461065c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065390613234565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154905090565b60035481565b600015156106b733611e79565b1515146106f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f0906132f4565b60405180910390fd5b6001151561070633611e28565b151514610748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073f906131f4565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154116107cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c490613374565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015490506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016108b99291906130fd565b602060405180830381600087803b1580156108d357600080fd5b505af11580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190612b70565b61094a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094190613334565b60405180910390fd5b50565b60055481565b600e5481565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16908060010180546109b5906136f1565b80601f01602080910402602001604051908101604052809291908181526020018280546109e1906136f1565b8015610a2e5780601f10610a0357610100808354040283529160200191610a2e565b820191906000526020600020905b815481529060010190602001808311610a1157829003601f168201915b5050505050908060020154908060030154908060040154905087565b60011515610a5733611e79565b151514610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9090613234565b60405180910390fd5b60011515610aa633611e28565b151514610ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adf906131f4565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015490506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836003811115610bbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610cc09291906130fd565b602060405180830381600087803b158015610cda57600080fd5b505af1158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d129190612b70565b610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d48906133b4565b60405180910390fd5b50565b6000816003811115610d8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166003811115610e17577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b600f5481565b600b5481565b80600060011515610e698383611d88565b151514610eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea290613274565b60405180910390fd5b60006008600085815260200190815260200160002090506000805b8260050180549050811015610fc1576000836005018281548110610f13577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115158460060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615151415610fad578280610fa990613754565b9350505b508080610fb990613754565b915050610ec6565b5081600401548110158260000160026101000a81548160ff02191690831515021790555060005b8260050180549050811015611384576000836005018281548110611035577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115158460000160029054906101000a900460ff16151514156111fa57600115158460060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515141561113e57600954600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254611132919061352f565b925050819055506111f5565b600a54600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082825461119291906135b6565b92505081905550600d54600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546111ed91906135b6565b925050819055505b611370565b600115158460060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515141561131357600b54600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008282546112ac91906135b6565b92505081905550600d54600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600082825461130791906135b6565b9250508190555061136f565b600c54600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254611367919061352f565b925050819055505b5b50808061137c90613754565b915050610fe8565b505050505050565b60045481565b600d5481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005b600860008381526020019081526020016000206005018054905081101561151a576000600860008481526020019081526020016000206005018281548110611430577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360038111156114e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506005600081548092919061150190613754565b919050555050808061151290613754565b9150506113bf565b5050565b6000151561152b33611e79565b15151461156d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611564906132f4565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306002546040518463ffffffff1660e01b81526004016115ce939291906130c6565b602060405180830381600087803b1580156115e857600080fd5b505af11580156115fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116209190612b70565b61165f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611656906133d4565b60405180910390fd5b6007339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060c0016040528060006003811115611707577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600115158152602001600160078054905061172791906135b6565b8152602001600354815260200160025481526020016000815250600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360038111156117d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010155606082015181600201556080820151816003015560a08201518160040155905050565b60025481565b606060008467ffffffffffffffff81111561186d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561189b5781602001602082028036833780820191505090505b5090508460055410156118e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118da90613394565b60405180910390fd5b60008361040086436118f591906135b6565b6118ff9190613585565b4361190a91906135b6565b61191491906135b6565b905060ff81611923919061352f565b4310611964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195b90613354565b60405180910390fd5b8381611970919061352f565b4310156119b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a9906132b4565b60405180910390fd5b6000805b858110156119fa57600181846119cc919061352f565b6119d6919061352f565b4060001c826119e5919061352f565b915080806119f290613754565b9150506119b6565b5060005b87811015611c005760006007808054905084611a1a91906137a7565b81548110611a51577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611a89816001610d54565b8015611a9a5750611a9981611e28565b5b15611bcb576003600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836003811115611b2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060056000815480929190611b43906136c7565b919050555080858381518110611b82577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180611bc790613754565b9250505b8260001b604051602001611bdf9190613090565b6040516020818303038152906040528051906020012060001c9250506119fe565b839450505050509392505050565b80611c18816128c4565b611c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4e90613254565b60405180910390fd5b81600060011515611c688383611d88565b151514611caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca190613274565b60405180910390fd5b600060086000868152602001908152602001600020905080600301548160020154611cd5919061352f565b4211611d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0d90613294565b60405180910390fd5b611d1f85610e58565b611d28856113bc565b60018160000160006101000a81548160ff02191690836001811115611d76577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055505050505050565b600a5481565b6000816001811115611dc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6008600085815260200190815260200160002060000160009054906101000a900460ff166001811115611e1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905092915050565b6000600454600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015410159050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff169050919050565b60011515611edf33611e79565b151514611f21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1890613234565b60405180910390fd5b60011515611f2e33611e28565b151514611f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f67906131f4565b60405180910390fd5b81611f7a816128c4565b611fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb090613254565b60405180910390fd5b82611fc48133612849565b612003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffa90613314565b60405180910390fd5b836000600115156120148383611d88565b151514612056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204d90613274565b60405180910390fd5b856008600082815260200190815260200160002060030154600860008381526020019081526020016000206002015461208f919061352f565b42106120d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c790613214565b60405180910390fd5b856008600089815260200190815260200160002060060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f81d089dc6a50bf4da1adab5071ab41e618054551c557b61e124f0ce2290bb870888860405161218692919061340f565b60405180910390a250505050505050565b60006121a8600e5486601054611829565b9050600060086000868152602001908152602001600020905060008160000160006101000a81548160ff0219169083600181111561220f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060018160000160016101000a81548160ff02191690831515021790555060008160000160026101000a81548160ff021916908315150217905550838160010190805190602001906122669291906128f8565b50428160020181905550828160030181905550600f5481600401819055508181600501908051906020019061229c92919061297e565b50600e548251146122e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d9906132d4565b60405180910390fd5b60005b8160050180549050811015612489576000826005018281548110612332577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060018360060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060008360060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fb75dc87e2f9d1c0a563b98a1148d3f71d4137a45be4148a6a35a0b045a3c910188856002015486600301548a60405161246d9493929190613438565b60405180910390a250808061248190613754565b9150506122e5565b50505050505050565b60008161249e816128c4565b6124dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d490613254565b60405180910390fd5b8260018015156124ed8383611d88565b15151461252f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252690613274565b60405180910390fd5b6008600086815260200190815260200160002060000160029054906101000a900460ff169350505050919050565b6001151561256a33611e79565b1515146125ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a390613234565b60405180910390fd5b600115156125b933611e28565b1515146125fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f2906131f4565b60405180910390fd5b3360006001151561260c8383610d54565b15151461264e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264590613274565b60405180910390fd5b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360038111156126da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600560008154809291906126f290613754565b91905055505050565b6001151561270833611e79565b15151461274a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274190613234565b60405180910390fd5b33600180151561275a8383610d54565b15151461279c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279390613274565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836003811115612828577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060056000815480929190612840906136c7565b91905055505050565b6000600115156008600085815260200190815260200160002060060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151514905092915050565b60095481565b6000600115156008600084815260200190815260200160002060000160019054906101000a900460ff161515149050919050565b828054612904906136f1565b90600052602060002090601f016020900481019282612926576000855561296d565b82601f1061293f57805160ff191683800117855561296d565b8280016001018555821561296d579182015b8281111561296c578251825591602001919060010190612951565b5b50905061297a9190612a08565b5090565b8280548282559060005260206000209081019282156129f7579160200282015b828111156129f65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061299e565b5b509050612a049190612a08565b5090565b5b80821115612a21576000816000905550600101612a09565b5090565b6000612a38612a33846134a9565b613484565b905082815260208101848484011115612a5057600080fd5b612a5b848285613685565b509392505050565b600081359050612a7281613d66565b92915050565b600081359050612a8781613d7d565b92915050565b600081519050612a9c81613d7d565b92915050565b600081359050612ab181613d94565b92915050565b600081359050612ac681613da4565b92915050565b600082601f830112612add57600080fd5b8135612aed848260208601612a25565b91505092915050565b600081359050612b0581613db4565b92915050565b600060208284031215612b1d57600080fd5b6000612b2b84828501612a63565b91505092915050565b60008060408385031215612b4757600080fd5b6000612b5585828601612a63565b9250506020612b6685828601612ab7565b9150509250929050565b600060208284031215612b8257600080fd5b6000612b9084828501612a8d565b91505092915050565b600060208284031215612bab57600080fd5b6000612bb984828501612af6565b91505092915050565b60008060408385031215612bd557600080fd5b6000612be385828601612af6565b9250506020612bf485828601612a63565b9150509250929050565b60008060408385031215612c1157600080fd5b6000612c1f85828601612af6565b9250506020612c3085828601612a78565b9150509250929050565b60008060408385031215612c4d57600080fd5b6000612c5b85828601612af6565b9250506020612c6c85828601612aa2565b9150509250929050565b60008060008060808587031215612c8c57600080fd5b6000612c9a87828801612af6565b9450506020612cab87828801612af6565b935050604085013567ffffffffffffffff811115612cc857600080fd5b612cd487828801612acc565b9250506060612ce587828801612af6565b91505092959194509250565b600080600060608486031215612d0657600080fd5b6000612d1486828701612af6565b9350506020612d2586828701612af6565b9250506040612d3686828701612af6565b9150509250925092565b6000612d4c8383612d58565b60208301905092915050565b612d61816135ea565b82525050565b612d70816135ea565b82525050565b6000612d81826134ea565b612d8b818561350d565b9350612d96836134da565b8060005b83811015612dc7578151612dae8882612d40565b9750612db983613500565b925050600181019050612d9a565b5085935050505092915050565b612ddd816135fc565b82525050565b612df4612def82613608565b61379d565b82525050565b612e038161364f565b82525050565b612e1281613673565b82525050565b6000612e23826134f5565b612e2d818561351e565b9350612e3d818560208601613694565b612e46816138c3565b840191505092915050565b6000612e5e60278361351e565b9150612e69826138d4565b604082019050919050565b6000612e8160258361351e565b9150612e8c82613923565b604082019050919050565b6000612ea460308361351e565b9150612eaf82613972565b604082019050919050565b6000612ec760188361351e565b9150612ed2826139c1565b602082019050919050565b6000612eea60348361351e565b9150612ef5826139ea565b604082019050919050565b6000612f0d60168361351e565b9150612f1882613a39565b602082019050919050565b6000612f3060308361351e565b9150612f3b82613a62565b604082019050919050565b6000612f5360058361351e565b9150612f5e82613ab1565b602082019050919050565b6000612f76602c8361351e565b9150612f8182613ada565b604082019050919050565b6000612f9960338361351e565b9150612fa482613b29565b604082019050919050565b6000612fbc602e8361351e565b9150612fc782613b78565b604082019050919050565b6000612fdf603c8361351e565b9150612fea82613bc7565b604082019050919050565b6000613002602a8361351e565b915061300d82613c16565b604082019050919050565b600061302560278361351e565b915061303082613c65565b604082019050919050565b600061304860318361351e565b915061305382613cb4565b604082019050919050565b600061306b602b8361351e565b915061307682613d03565b604082019050919050565b61308a81613645565b82525050565b600061309c8284612de3565b60208201915081905092915050565b60006020820190506130c06000830184612d67565b92915050565b60006060820190506130db6000830186612d67565b6130e86020830185612d67565b6130f56040830184613081565b949350505050565b60006040820190506131126000830185612d67565b61311f6020830184613081565b9392505050565b600060208201905081810360008301526131408184612d76565b905092915050565b600060208201905061315d6000830184612dd4565b92915050565b60006020820190506131786000830184612dfa565b92915050565b600060e082019050613193600083018a612e09565b6131a06020830189612dd4565b6131ad6040830188612dd4565b81810360608301526131bf8187612e18565b90506131ce6080830186613081565b6131db60a0830185613081565b6131e860c0830184613081565b98975050505050505050565b6000602082019050818103600083015261320d81612e51565b9050919050565b6000602082019050818103600083015261322d81612e74565b9050919050565b6000602082019050818103600083015261324d81612e97565b9050919050565b6000602082019050818103600083015261326d81612eba565b9050919050565b6000602082019050818103600083015261328d81612edd565b9050919050565b600060208201905081810360008301526132ad81612f00565b9050919050565b600060208201905081810360008301526132cd81612f23565b9050919050565b600060208201905081810360008301526132ed81612f46565b9050919050565b6000602082019050818103600083015261330d81612f69565b9050919050565b6000602082019050818103600083015261332d81612f8c565b9050919050565b6000602082019050818103600083015261334d81612faf565b9050919050565b6000602082019050818103600083015261336d81612fd2565b9050919050565b6000602082019050818103600083015261338d81612ff5565b9050919050565b600060208201905081810360008301526133ad81613018565b9050919050565b600060208201905081810360008301526133cd8161303b565b9050919050565b600060208201905081810360008301526133ed8161305e565b9050919050565b60006020820190506134096000830184613081565b92915050565b60006040820190506134246000830185613081565b6134316020830184612dd4565b9392505050565b600060808201905061344d6000830187613081565b61345a6020830186613081565b6134676040830185613081565b81810360608301526134798184612e18565b905095945050505050565b600061348e61349f565b905061349a8282613723565b919050565b6000604051905090565b600067ffffffffffffffff8211156134c4576134c3613894565b5b6134cd826138c3565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061353a82613645565b915061354583613645565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561357a576135796137d8565b5b828201905092915050565b600061359082613645565b915061359b83613645565b9250826135ab576135aa613807565b5b828204905092915050565b60006135c182613645565b91506135cc83613645565b9250828210156135df576135de6137d8565b5b828203905092915050565b60006135f582613625565b9050919050565b60008115159050919050565b6000819050919050565b600081905061362082613d52565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061365a82613661565b9050919050565b600061366c82613625565b9050919050565b600061367e82613612565b9050919050565b82818337600083830152505050565b60005b838110156136b2578082015181840152602081019050613697565b838111156136c1576000848401525b50505050565b60006136d282613645565b915060008214156136e6576136e56137d8565b5b600182039050919050565b6000600282049050600182168061370957607f821691505b6020821081141561371d5761371c613865565b5b50919050565b61372c826138c3565b810181811067ffffffffffffffff8211171561374b5761374a613894565b5b80604052505050565b600061375f82613645565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613792576137916137d8565b5b600182019050919050565b6000819050919050565b60006137b282613645565b91506137bd83613645565b9250826137cd576137cc613807565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f5769746e657373506f6f6c3a20746865207769746e65737320697320756e717560008201527f616c696669656400000000000000000000000000000000000000000000000000602082015250565b7f5769746e657373506f6f6c3a206d6f6e69746f72696e672074696d652065786360008201527f6565646564000000000000000000000000000000000000000000000000000000602082015250565b7f5769746e657373506f6f6c3a20746865206164647265737320686164206e6f7460008201527f206265656e207265676973746572656400000000000000000000000000000000602082015250565b7f5769746e657373506f6f6c3a20696e76616c696420736c610000000000000000600082015250565b7f576974656e7373506f6f6c3a2066756e6374696f6e2063616e6e6f742062652060008201527f63616c6c65642061742074686973207374617465000000000000000000000000602082015250565b7f6d6f6e69746f72696e67206973206e6f74206f76657200000000000000000000600082015250565b7f57696e746e657373506f6f6c3a206e6f206d6f726520626c6f636b4e6565642060008201527f626c6f636b732067656e65726174656400000000000000000000000000000000602082015250565b7f77726f6e67000000000000000000000000000000000000000000000000000000600082015250565b7f5769746e657373506f6f6c3a207468652061646472657373206861642062656560008201527f6e20726567697374657265640000000000000000000000000000000000000000602082015250565b7f5769746e657373506f6f6c3a20746865207769746e657373206973206e6f742060008201527f6120636f6d6d6974746565206d656d6265722000000000000000000000000000602082015250565b7f5769746e657373506f6f6c3a206661696c656420746f2064726177207468652060008201527f7769746e65737320726577617264000000000000000000000000000000000000602082015250565b7f5769746e657373506f6f6c3a20626c6f636b686173682063616e206f6e6c792060008201527f62652061636365737365642077697468696e2032353520646570746800000000602082015250565b7f5769746e657373506f6f6c3a2074686520726577617264206f66207769746e6560008201527f7373206973207a65726f00000000000000000000000000000000000000000000602082015250565b7f57696e746e657373506f6f6c3a206e6f7420656e6f756768206f6e6c696e652060008201527f7769746e65737300000000000000000000000000000000000000000000000000602082015250565b7f5769746e657373506f6f6c3a206661696c656420746f20726566756e6420746860008201527f65207769746e657373206465706f736974000000000000000000000000000000602082015250565b7f5769746e657373506f6f6c3a206661696c656420746f206c6f636b207769746e60008201527f657373206465706f697374000000000000000000000000000000000000000000602082015250565b60028110613d6357613d62613836565b5b50565b613d6f816135ea565b8114613d7a57600080fd5b50565b613d86816135fc565b8114613d9157600080fd5b50565b60028110613da157600080fd5b50565b60048110613db157600080fd5b50565b613dbd81613645565b8114613dc857600080fd5b5056fea2646970667358221220960bb249b239f8445493c38405e76f9aab6fa83d52eef761059b347565dc2db464736f6c63430008010033"

// DeployMarket deploys a new Ethereum contract, binding an instance of Market to it.
func DeployMarket(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenContractAddress common.Address) (common.Address, *types.Transaction, *Market, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketBin), backend, _tokenContractAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// Market is an auto generated Go binding around an Ethereum contract.
type Market struct {
	MarketCaller     // Read-only binding to the contract
	MarketTransactor // Write-only binding to the contract
	MarketFilterer   // Log filterer for contract events
}

// MarketCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketSession struct {
	Contract     *Market           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketCallerSession struct {
	Contract *MarketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MarketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketTransactorSession struct {
	Contract     *MarketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketRaw struct {
	Contract *Market // Generic contract binding to access the raw methods on
}

// MarketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketCallerRaw struct {
	Contract *MarketCaller // Generic read-only contract binding to access the raw methods on
}

// MarketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketTransactorRaw struct {
	Contract *MarketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarket creates a new instance of Market, bound to a specific deployed contract.
func NewMarket(address common.Address, backend bind.ContractBackend) (*Market, error) {
	contract, err := bindMarket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// NewMarketCaller creates a new read-only instance of Market, bound to a specific deployed contract.
func NewMarketCaller(address common.Address, caller bind.ContractCaller) (*MarketCaller, error) {
	contract, err := bindMarket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketCaller{contract: contract}, nil
}

// NewMarketTransactor creates a new write-only instance of Market, bound to a specific deployed contract.
func NewMarketTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketTransactor, error) {
	contract, err := bindMarket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketTransactor{contract: contract}, nil
}

// NewMarketFilterer creates a new log filterer instance of Market, bound to a specific deployed contract.
func NewMarketFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketFilterer, error) {
	contract, err := bindMarket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketFilterer{contract: contract}, nil
}

// bindMarket binds a generic wrapper to an already deployed contract.
func bindMarket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.MarketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.contract.Transact(opts, method, params...)
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketCaller) CalculateLockFee(opts *bind.CallOpts, _highestUnitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "calculateLockFee", _highestUnitPrice, _faasDuration)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketSession) CalculateLockFee(_highestUnitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateLockFee(&_Market.CallOpts, _highestUnitPrice, _faasDuration)
}

// CalculateLockFee is a free data retrieval call binding the contract method 0xc4c1e493.
//
// Solidity: function calculateLockFee(uint256 _highestUnitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketCallerSession) CalculateLockFee(_highestUnitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateLockFee(&_Market.CallOpts, _highestUnitPrice, _faasDuration)
}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketCaller) CalculateServiceFee(opts *bind.CallOpts, _unitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "calculateServiceFee", _unitPrice, _faasDuration)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketSession) CalculateServiceFee(_unitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateServiceFee(&_Market.CallOpts, _unitPrice, _faasDuration)
}

// CalculateServiceFee is a free data retrieval call binding the contract method 0x90bceb24.
//
// Solidity: function calculateServiceFee(uint256 _unitPrice, uint256 _faasDuration) pure returns(uint256)
func (_Market *MarketCallerSession) CalculateServiceFee(_unitPrice *big.Int, _faasDuration *big.Int) (*big.Int, error) {
	return _Market.Contract.CalculateServiceFee(&_Market.CallOpts, _unitPrice, _faasDuration)
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) view returns(address, uint256, uint256, uint256)
func (_Market *MarketCaller) GetDeploymentOrder(opts *bind.CallOpts, _deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getDeploymentOrder", _deploymentOrderID)

	if err != nil {
		return *new(common.Address), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) view returns(address, uint256, uint256, uint256)
func (_Market *MarketSession) GetDeploymentOrder(_deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	return _Market.Contract.GetDeploymentOrder(&_Market.CallOpts, _deploymentOrderID)
}

// GetDeploymentOrder is a free data retrieval call binding the contract method 0xce67ca03.
//
// Solidity: function getDeploymentOrder(uint256 _deploymentOrderID) view returns(address, uint256, uint256, uint256)
func (_Market *MarketCallerSession) GetDeploymentOrder(_deploymentOrderID *big.Int) (common.Address, *big.Int, *big.Int, *big.Int, error) {
	return _Market.Contract.GetDeploymentOrder(&_Market.CallOpts, _deploymentOrderID)
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _faasLevelID) view returns(uint256, uint256)
func (_Market *MarketCaller) GetFaaSLevel(opts *bind.CallOpts, _faasLevelID *big.Int) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getFaaSLevel", _faasLevelID)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _faasLevelID) view returns(uint256, uint256)
func (_Market *MarketSession) GetFaaSLevel(_faasLevelID *big.Int) (*big.Int, *big.Int, error) {
	return _Market.Contract.GetFaaSLevel(&_Market.CallOpts, _faasLevelID)
}

// GetFaaSLevel is a free data retrieval call binding the contract method 0xc86fdf7d.
//
// Solidity: function getFaaSLevel(uint256 _faasLevelID) view returns(uint256, uint256)
func (_Market *MarketCallerSession) GetFaaSLevel(_faasLevelID *big.Int) (*big.Int, *big.Int, error) {
	return _Market.Contract.GetFaaSLevel(&_Market.CallOpts, _faasLevelID)
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) view returns(uint256)
func (_Market *MarketCaller) GetProviderDeposit(opts *bind.CallOpts, _provider common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getProviderDeposit", _provider)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) view returns(uint256)
func (_Market *MarketSession) GetProviderDeposit(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderDeposit(&_Market.CallOpts, _provider)
}

// GetProviderDeposit is a free data retrieval call binding the contract method 0x61bb20f0.
//
// Solidity: function getProviderDeposit(address _provider) view returns(uint256)
func (_Market *MarketCallerSession) GetProviderDeposit(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderDeposit(&_Market.CallOpts, _provider)
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) view returns(uint256)
func (_Market *MarketCaller) GetProviderReputation(opts *bind.CallOpts, _provider common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getProviderReputation", _provider)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) view returns(uint256)
func (_Market *MarketSession) GetProviderReputation(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderReputation(&_Market.CallOpts, _provider)
}

// GetProviderReputation is a free data retrieval call binding the contract method 0x729d98e9.
//
// Solidity: function getProviderReputation(address _provider) view returns(uint256)
func (_Market *MarketCallerSession) GetProviderReputation(_provider common.Address) (*big.Int, error) {
	return _Market.Contract.GetProviderReputation(&_Market.CallOpts, _provider)
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() view returns(uint256)
func (_Market *MarketCaller) GetStdProviderDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getStdProviderDeposit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() view returns(uint256)
func (_Market *MarketSession) GetStdProviderDeposit() (*big.Int, error) {
	return _Market.Contract.GetStdProviderDeposit(&_Market.CallOpts)
}

// GetStdProviderDeposit is a free data retrieval call binding the contract method 0x1c0d3ebd.
//
// Solidity: function getStdProviderDeposit() view returns(uint256)
func (_Market *MarketCallerSession) GetStdProviderDeposit() (*big.Int, error) {
	return _Market.Contract.GetStdProviderDeposit(&_Market.CallOpts)
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) view returns(bool)
func (_Market *MarketCaller) IsProviderQualified(opts *bind.CallOpts, _provider common.Address) (bool, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "isProviderQualified", _provider)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) view returns(bool)
func (_Market *MarketSession) IsProviderQualified(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderQualified(&_Market.CallOpts, _provider)
}

// IsProviderQualified is a free data retrieval call binding the contract method 0xb8296471.
//
// Solidity: function isProviderQualified(address _provider) view returns(bool)
func (_Market *MarketCallerSession) IsProviderQualified(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderQualified(&_Market.CallOpts, _provider)
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) view returns(bool)
func (_Market *MarketCaller) IsProviderRegistered(opts *bind.CallOpts, _provider common.Address) (bool, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "isProviderRegistered", _provider)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) view returns(bool)
func (_Market *MarketSession) IsProviderRegistered(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderRegistered(&_Market.CallOpts, _provider)
}

// IsProviderRegistered is a free data retrieval call binding the contract method 0x1ead914e.
//
// Solidity: function isProviderRegistered(address _provider) view returns(bool)
func (_Market *MarketCallerSession) IsProviderRegistered(_provider common.Address) (bool, error) {
	return _Market.Contract.IsProviderRegistered(&_Market.CallOpts, _provider)
}

// NumFaaSLevel is a free data retrieval call binding the contract method 0x9a599201.
//
// Solidity: function numFaaSLevel() view returns(uint256)
func (_Market *MarketCaller) NumFaaSLevel(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "numFaaSLevel")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumFaaSLevel is a free data retrieval call binding the contract method 0x9a599201.
//
// Solidity: function numFaaSLevel() view returns(uint256)
func (_Market *MarketSession) NumFaaSLevel() (*big.Int, error) {
	return _Market.Contract.NumFaaSLevel(&_Market.CallOpts)
}

// NumFaaSLevel is a free data retrieval call binding the contract method 0x9a599201.
//
// Solidity: function numFaaSLevel() view returns(uint256)
func (_Market *MarketCallerSession) NumFaaSLevel() (*big.Int, error) {
	return _Market.Contract.NumFaaSLevel(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketCallerSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// QueryLease is a free data retrieval call binding the contract method 0x65d31c38.
//
// Solidity: function queryLease(uint256 _deploymentOrderID) view returns(address, address)
func (_Market *MarketCaller) QueryLease(opts *bind.CallOpts, _deploymentOrderID *big.Int) (common.Address, common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "queryLease", _deploymentOrderID)

	if err != nil {
		return *new(common.Address), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return out0, out1, err

}

// QueryLease is a free data retrieval call binding the contract method 0x65d31c38.
//
// Solidity: function queryLease(uint256 _deploymentOrderID) view returns(address, address)
func (_Market *MarketSession) QueryLease(_deploymentOrderID *big.Int) (common.Address, common.Address, error) {
	return _Market.Contract.QueryLease(&_Market.CallOpts, _deploymentOrderID)
}

// QueryLease is a free data retrieval call binding the contract method 0x65d31c38.
//
// Solidity: function queryLease(uint256 _deploymentOrderID) view returns(address, address)
func (_Market *MarketCallerSession) QueryLease(_deploymentOrderID *big.Int) (common.Address, common.Address, error) {
	return _Market.Contract.QueryLease(&_Market.CallOpts, _deploymentOrderID)
}

// QueryMatch is a free data retrieval call binding the contract method 0x1b5360cd.
//
// Solidity: function queryMatch(uint256 _deploymentOrderID) view returns(bool)
func (_Market *MarketCaller) QueryMatch(opts *bind.CallOpts, _deploymentOrderID *big.Int) (bool, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "queryMatch", _deploymentOrderID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// QueryMatch is a free data retrieval call binding the contract method 0x1b5360cd.
//
// Solidity: function queryMatch(uint256 _deploymentOrderID) view returns(bool)
func (_Market *MarketSession) QueryMatch(_deploymentOrderID *big.Int) (bool, error) {
	return _Market.Contract.QueryMatch(&_Market.CallOpts, _deploymentOrderID)
}

// QueryMatch is a free data retrieval call binding the contract method 0x1b5360cd.
//
// Solidity: function queryMatch(uint256 _deploymentOrderID) view returns(bool)
func (_Market *MarketCallerSession) QueryMatch(_deploymentOrderID *big.Int) (bool, error) {
	return _Market.Contract.QueryMatch(&_Market.CallOpts, _deploymentOrderID)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_Market *MarketCaller) TokenContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "tokenContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_Market *MarketSession) TokenContract() (common.Address, error) {
	return _Market.Contract.TokenContract(&_Market.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_Market *MarketCallerSession) TokenContract() (common.Address, error) {
	return _Market.Contract.TokenContract(&_Market.CallOpts)
}

// WpContract is a free data retrieval call binding the contract method 0xacd3dce3.
//
// Solidity: function wpContract() view returns(address)
func (_Market *MarketCaller) WpContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "wpContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WpContract is a free data retrieval call binding the contract method 0xacd3dce3.
//
// Solidity: function wpContract() view returns(address)
func (_Market *MarketSession) WpContract() (common.Address, error) {
	return _Market.Contract.WpContract(&_Market.CallOpts)
}

// WpContract is a free data retrieval call binding the contract method 0xacd3dce3.
//
// Solidity: function wpContract() view returns(address)
func (_Market *MarketCallerSession) WpContract() (common.Address, error) {
	return _Market.Contract.WpContract(&_Market.CallOpts)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns()
func (_Market *MarketTransactor) AddFaaSLevel(opts *bind.TransactOpts, _core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "addFaaSLevel", _core, _mem)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns()
func (_Market *MarketSession) AddFaaSLevel(_core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AddFaaSLevel(&_Market.TransactOpts, _core, _mem)
}

// AddFaaSLevel is a paid mutator transaction binding the contract method 0xc0b717c0.
//
// Solidity: function addFaaSLevel(uint256 _core, uint256 _mem) returns()
func (_Market *MarketTransactorSession) AddFaaSLevel(_core *big.Int, _mem *big.Int) (*types.Transaction, error) {
	return _Market.Contract.AddFaaSLevel(&_Market.TransactOpts, _core, _mem)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketTransactor) Bid(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "bid", _deploymentOrderID, _unitPrice)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketSession) Bid(_deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.Contract.Bid(&_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

// Bid is a paid mutator transaction binding the contract method 0x598647f8.
//
// Solidity: function bid(uint256 _deploymentOrderID, uint256 _unitPrice) returns()
func (_Market *MarketTransactorSession) Bid(_deploymentOrderID *big.Int, _unitPrice *big.Int) (*types.Transaction, error) {
	return _Market.Contract.Bid(&_Market.TransactOpts, _deploymentOrderID, _unitPrice)
}

// ConfirmDeploymentInfo is a paid mutator transaction binding the contract method 0x80f60d2b.
//
// Solidity: function confirmDeploymentInfo(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) ConfirmDeploymentInfo(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "confirmDeploymentInfo", _deploymentOrderID)
}

// ConfirmDeploymentInfo is a paid mutator transaction binding the contract method 0x80f60d2b.
//
// Solidity: function confirmDeploymentInfo(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) ConfirmDeploymentInfo(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.ConfirmDeploymentInfo(&_Market.TransactOpts, _deploymentOrderID)
}

// ConfirmDeploymentInfo is a paid mutator transaction binding the contract method 0x80f60d2b.
//
// Solidity: function confirmDeploymentInfo(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) ConfirmDeploymentInfo(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.ConfirmDeploymentInfo(&_Market.TransactOpts, _deploymentOrderID)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) FinishDeploymemtOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "finishDeploymemtOrder", _deploymentOrderID)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) FinishDeploymemtOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.FinishDeploymemtOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// FinishDeploymemtOrder is a paid mutator transaction binding the contract method 0x85c82b25.
//
// Solidity: function finishDeploymemtOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) FinishDeploymemtOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.FinishDeploymemtOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xb8f9898f.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) FulfillDeploymentOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "fulfillDeploymentOrder", _deploymentOrderID)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xb8f9898f.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) FulfillDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.FulfillDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// FulfillDeploymentOrder is a paid mutator transaction binding the contract method 0xb8f9898f.
//
// Solidity: function fulfillDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) FulfillDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.FulfillDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactor) MatchDeploymentOrder(opts *bind.TransactOpts, _deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "matchDeploymentOrder", _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketSession) MatchDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.MatchDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// MatchDeploymentOrder is a paid mutator transaction binding the contract method 0x18f645fa.
//
// Solidity: function matchDeploymentOrder(uint256 _deploymentOrderID) returns()
func (_Market *MarketTransactorSession) MatchDeploymentOrder(_deploymentOrderID *big.Int) (*types.Transaction, error) {
	return _Market.Contract.MatchDeploymentOrder(&_Market.TransactOpts, _deploymentOrderID)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0x270d9b42.
//
// Solidity: function newDeploymentOrder(uint256 _nonce, uint256 _faasLevelID, uint256 _faasDuration, string _funcMsg, uint256 _highestUnitPrice, uint256 _biddingDuration) returns()
func (_Market *MarketTransactor) NewDeploymentOrder(opts *bind.TransactOpts, _nonce *big.Int, _faasLevelID *big.Int, _faasDuration *big.Int, _funcMsg string, _highestUnitPrice *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "newDeploymentOrder", _nonce, _faasLevelID, _faasDuration, _funcMsg, _highestUnitPrice, _biddingDuration)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0x270d9b42.
//
// Solidity: function newDeploymentOrder(uint256 _nonce, uint256 _faasLevelID, uint256 _faasDuration, string _funcMsg, uint256 _highestUnitPrice, uint256 _biddingDuration) returns()
func (_Market *MarketSession) NewDeploymentOrder(_nonce *big.Int, _faasLevelID *big.Int, _faasDuration *big.Int, _funcMsg string, _highestUnitPrice *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.NewDeploymentOrder(&_Market.TransactOpts, _nonce, _faasLevelID, _faasDuration, _funcMsg, _highestUnitPrice, _biddingDuration)
}

// NewDeploymentOrder is a paid mutator transaction binding the contract method 0x270d9b42.
//
// Solidity: function newDeploymentOrder(uint256 _nonce, uint256 _faasLevelID, uint256 _faasDuration, string _funcMsg, uint256 _highestUnitPrice, uint256 _biddingDuration) returns()
func (_Market *MarketTransactorSession) NewDeploymentOrder(_nonce *big.Int, _faasLevelID *big.Int, _faasDuration *big.Int, _funcMsg string, _highestUnitPrice *big.Int, _biddingDuration *big.Int) (*types.Transaction, error) {
	return _Market.Contract.NewDeploymentOrder(&_Market.TransactOpts, _nonce, _faasLevelID, _faasDuration, _funcMsg, _highestUnitPrice, _biddingDuration)
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketTransactor) ProviderLogin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "providerLogin")
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketSession) ProviderLogin() (*types.Transaction, error) {
	return _Market.Contract.ProviderLogin(&_Market.TransactOpts)
}

// ProviderLogin is a paid mutator transaction binding the contract method 0x2bf35570.
//
// Solidity: function providerLogin() returns()
func (_Market *MarketTransactorSession) ProviderLogin() (*types.Transaction, error) {
	return _Market.Contract.ProviderLogin(&_Market.TransactOpts)
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketTransactor) ProviderLogout(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "providerLogout")
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketSession) ProviderLogout() (*types.Transaction, error) {
	return _Market.Contract.ProviderLogout(&_Market.TransactOpts)
}

// ProviderLogout is a paid mutator transaction binding the contract method 0x884eacb8.
//
// Solidity: function providerLogout() returns()
func (_Market *MarketTransactorSession) ProviderLogout() (*types.Transaction, error) {
	return _Market.Contract.ProviderLogout(&_Market.TransactOpts)
}

// PublishDeploymentInfo is a paid mutator transaction binding the contract method 0x4cef003e.
//
// Solidity: function publishDeploymentInfo(uint256 _deploymentOrderID, string _funcPath, string _deployPath) returns()
func (_Market *MarketTransactor) PublishDeploymentInfo(opts *bind.TransactOpts, _deploymentOrderID *big.Int, _funcPath string, _deployPath string) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "publishDeploymentInfo", _deploymentOrderID, _funcPath, _deployPath)
}

// PublishDeploymentInfo is a paid mutator transaction binding the contract method 0x4cef003e.
//
// Solidity: function publishDeploymentInfo(uint256 _deploymentOrderID, string _funcPath, string _deployPath) returns()
func (_Market *MarketSession) PublishDeploymentInfo(_deploymentOrderID *big.Int, _funcPath string, _deployPath string) (*types.Transaction, error) {
	return _Market.Contract.PublishDeploymentInfo(&_Market.TransactOpts, _deploymentOrderID, _funcPath, _deployPath)
}

// PublishDeploymentInfo is a paid mutator transaction binding the contract method 0x4cef003e.
//
// Solidity: function publishDeploymentInfo(uint256 _deploymentOrderID, string _funcPath, string _deployPath) returns()
func (_Market *MarketTransactorSession) PublishDeploymentInfo(_deploymentOrderID *big.Int, _funcPath string, _deployPath string) (*types.Transaction, error) {
	return _Market.Contract.PublishDeploymentInfo(&_Market.TransactOpts, _deploymentOrderID, _funcPath, _deployPath)
}

// MarketBiddingEndEventIterator is returned from FilterBiddingEndEvent and is used to iterate over the raw logs and unpacked data for BiddingEndEvent events raised by the Market contract.
type MarketBiddingEndEventIterator struct {
	Event *MarketBiddingEndEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketBiddingEndEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketBiddingEndEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketBiddingEndEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketBiddingEndEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketBiddingEndEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketBiddingEndEvent represents a BiddingEndEvent event raised by the Market contract.
type MarketBiddingEndEvent struct {
	DeploymentOrderID *big.Int
	Provider          common.Address
	Success           bool
	FaasLevelID       *big.Int
	UnitPrice         *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterBiddingEndEvent is a free log retrieval operation binding the contract event 0xfb7ebde163245591a20fe6c28c03b154a1e962ced30f0a1539543408e39caca5.
//
// Solidity: event BiddingEndEvent(uint256 indexed _deploymentOrderID, address indexed _provider, bool indexed _success, uint256 _faasLevelID, uint256 _unitPrice)
func (_Market *MarketFilterer) FilterBiddingEndEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int, _provider []common.Address, _success []bool) (*MarketBiddingEndEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}
	var _successRule []interface{}
	for _, _successItem := range _success {
		_successRule = append(_successRule, _successItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "BiddingEndEvent", _deploymentOrderIDRule, _providerRule, _successRule)
	if err != nil {
		return nil, err
	}
	return &MarketBiddingEndEventIterator{contract: _Market.contract, event: "BiddingEndEvent", logs: logs, sub: sub}, nil
}

// WatchBiddingEndEvent is a free log subscription operation binding the contract event 0xfb7ebde163245591a20fe6c28c03b154a1e962ced30f0a1539543408e39caca5.
//
// Solidity: event BiddingEndEvent(uint256 indexed _deploymentOrderID, address indexed _provider, bool indexed _success, uint256 _faasLevelID, uint256 _unitPrice)
func (_Market *MarketFilterer) WatchBiddingEndEvent(opts *bind.WatchOpts, sink chan<- *MarketBiddingEndEvent, _deploymentOrderID []*big.Int, _provider []common.Address, _success []bool) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}
	var _successRule []interface{}
	for _, _successItem := range _success {
		_successRule = append(_successRule, _successItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "BiddingEndEvent", _deploymentOrderIDRule, _providerRule, _successRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketBiddingEndEvent)
				if err := _Market.contract.UnpackLog(event, "BiddingEndEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBiddingEndEvent is a log parse operation binding the contract event 0xfb7ebde163245591a20fe6c28c03b154a1e962ced30f0a1539543408e39caca5.
//
// Solidity: event BiddingEndEvent(uint256 indexed _deploymentOrderID, address indexed _provider, bool indexed _success, uint256 _faasLevelID, uint256 _unitPrice)
func (_Market *MarketFilterer) ParseBiddingEndEvent(log types.Log) (*MarketBiddingEndEvent, error) {
	event := new(MarketBiddingEndEvent)
	if err := _Market.contract.UnpackLog(event, "BiddingEndEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketFinishDeploymentOrderEventIterator is returned from FilterFinishDeploymentOrderEvent and is used to iterate over the raw logs and unpacked data for FinishDeploymentOrderEvent events raised by the Market contract.
type MarketFinishDeploymentOrderEventIterator struct {
	Event *MarketFinishDeploymentOrderEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketFinishDeploymentOrderEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketFinishDeploymentOrderEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketFinishDeploymentOrderEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketFinishDeploymentOrderEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketFinishDeploymentOrderEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketFinishDeploymentOrderEvent represents a FinishDeploymentOrderEvent event raised by the Market contract.
type MarketFinishDeploymentOrderEvent struct {
	DeploymentOrderID *big.Int
	IsViolatedSLA     bool
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterFinishDeploymentOrderEvent is a free log retrieval operation binding the contract event 0xbc5f0c1789a28272d5f33803afe7fe389319da303c28b0f1eaaf46b93d4a7f4e.
//
// Solidity: event FinishDeploymentOrderEvent(uint256 indexed _deploymentOrderID, bool isViolatedSLA)
func (_Market *MarketFilterer) FilterFinishDeploymentOrderEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketFinishDeploymentOrderEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "FinishDeploymentOrderEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketFinishDeploymentOrderEventIterator{contract: _Market.contract, event: "FinishDeploymentOrderEvent", logs: logs, sub: sub}, nil
}

// WatchFinishDeploymentOrderEvent is a free log subscription operation binding the contract event 0xbc5f0c1789a28272d5f33803afe7fe389319da303c28b0f1eaaf46b93d4a7f4e.
//
// Solidity: event FinishDeploymentOrderEvent(uint256 indexed _deploymentOrderID, bool isViolatedSLA)
func (_Market *MarketFilterer) WatchFinishDeploymentOrderEvent(opts *bind.WatchOpts, sink chan<- *MarketFinishDeploymentOrderEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "FinishDeploymentOrderEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketFinishDeploymentOrderEvent)
				if err := _Market.contract.UnpackLog(event, "FinishDeploymentOrderEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinishDeploymentOrderEvent is a log parse operation binding the contract event 0xbc5f0c1789a28272d5f33803afe7fe389319da303c28b0f1eaaf46b93d4a7f4e.
//
// Solidity: event FinishDeploymentOrderEvent(uint256 indexed _deploymentOrderID, bool isViolatedSLA)
func (_Market *MarketFilterer) ParseFinishDeploymentOrderEvent(log types.Log) (*MarketFinishDeploymentOrderEvent, error) {
	event := new(MarketFinishDeploymentOrderEvent)
	if err := _Market.contract.UnpackLog(event, "FinishDeploymentOrderEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketNewDeploymentInfoEventIterator is returned from FilterNewDeploymentInfoEvent and is used to iterate over the raw logs and unpacked data for NewDeploymentInfoEvent events raised by the Market contract.
type MarketNewDeploymentInfoEventIterator struct {
	Event *MarketNewDeploymentInfoEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewDeploymentInfoEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewDeploymentInfoEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewDeploymentInfoEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewDeploymentInfoEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewDeploymentInfoEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewDeploymentInfoEvent represents a NewDeploymentInfoEvent event raised by the Market contract.
type MarketNewDeploymentInfoEvent struct {
	DeploymentOrderID *big.Int
	Provider          common.Address
	FuncPath          string
	DeployPath        string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewDeploymentInfoEvent is a free log retrieval operation binding the contract event 0xd59c40916276fe9f586bc2609c28b14042848eb9a3bd25616762dff661008104.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address indexed _provider, string funcPath, string deployPath)
func (_Market *MarketFilterer) FilterNewDeploymentInfoEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int, _provider []common.Address) (*MarketNewDeploymentInfoEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewDeploymentInfoEvent", _deploymentOrderIDRule, _providerRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewDeploymentInfoEventIterator{contract: _Market.contract, event: "NewDeploymentInfoEvent", logs: logs, sub: sub}, nil
}

// WatchNewDeploymentInfoEvent is a free log subscription operation binding the contract event 0xd59c40916276fe9f586bc2609c28b14042848eb9a3bd25616762dff661008104.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address indexed _provider, string funcPath, string deployPath)
func (_Market *MarketFilterer) WatchNewDeploymentInfoEvent(opts *bind.WatchOpts, sink chan<- *MarketNewDeploymentInfoEvent, _deploymentOrderID []*big.Int, _provider []common.Address) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewDeploymentInfoEvent", _deploymentOrderIDRule, _providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewDeploymentInfoEvent)
				if err := _Market.contract.UnpackLog(event, "NewDeploymentInfoEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDeploymentInfoEvent is a log parse operation binding the contract event 0xd59c40916276fe9f586bc2609c28b14042848eb9a3bd25616762dff661008104.
//
// Solidity: event NewDeploymentInfoEvent(uint256 indexed _deploymentOrderID, address indexed _provider, string funcPath, string deployPath)
func (_Market *MarketFilterer) ParseNewDeploymentInfoEvent(log types.Log) (*MarketNewDeploymentInfoEvent, error) {
	event := new(MarketNewDeploymentInfoEvent)
	if err := _Market.contract.UnpackLog(event, "NewDeploymentInfoEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketNewDeploymentOrderEventIterator is returned from FilterNewDeploymentOrderEvent and is used to iterate over the raw logs and unpacked data for NewDeploymentOrderEvent events raised by the Market contract.
type MarketNewDeploymentOrderEventIterator struct {
	Event *MarketNewDeploymentOrderEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewDeploymentOrderEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewDeploymentOrderEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewDeploymentOrderEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewDeploymentOrderEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewDeploymentOrderEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewDeploymentOrderEvent represents a NewDeploymentOrderEvent event raised by the Market contract.
type MarketNewDeploymentOrderEvent struct {
	Customer          common.Address
	Nonce             *big.Int
	DeploymentOrderID *big.Int
	FaasLevelID       *big.Int
	HighestUnitPrice  *big.Int
	FaasDuration      *big.Int
	BiddingDuration   *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewDeploymentOrderEvent is a free log retrieval operation binding the contract event 0xf4c3705c6e612c94165e537fa729b4c04ec7479c1ea185bd9f5ba2594e812b3f.
//
// Solidity: event NewDeploymentOrderEvent(address indexed _customer, uint256 indexed _nonce, uint256 indexed _deploymentOrderID, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration)
func (_Market *MarketFilterer) FilterNewDeploymentOrderEvent(opts *bind.FilterOpts, _customer []common.Address, _nonce []*big.Int, _deploymentOrderID []*big.Int) (*MarketNewDeploymentOrderEventIterator, error) {

	var _customerRule []interface{}
	for _, _customerItem := range _customer {
		_customerRule = append(_customerRule, _customerItem)
	}
	var _nonceRule []interface{}
	for _, _nonceItem := range _nonce {
		_nonceRule = append(_nonceRule, _nonceItem)
	}
	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewDeploymentOrderEvent", _customerRule, _nonceRule, _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewDeploymentOrderEventIterator{contract: _Market.contract, event: "NewDeploymentOrderEvent", logs: logs, sub: sub}, nil
}

// WatchNewDeploymentOrderEvent is a free log subscription operation binding the contract event 0xf4c3705c6e612c94165e537fa729b4c04ec7479c1ea185bd9f5ba2594e812b3f.
//
// Solidity: event NewDeploymentOrderEvent(address indexed _customer, uint256 indexed _nonce, uint256 indexed _deploymentOrderID, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration)
func (_Market *MarketFilterer) WatchNewDeploymentOrderEvent(opts *bind.WatchOpts, sink chan<- *MarketNewDeploymentOrderEvent, _customer []common.Address, _nonce []*big.Int, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _customerRule []interface{}
	for _, _customerItem := range _customer {
		_customerRule = append(_customerRule, _customerItem)
	}
	var _nonceRule []interface{}
	for _, _nonceItem := range _nonce {
		_nonceRule = append(_nonceRule, _nonceItem)
	}
	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewDeploymentOrderEvent", _customerRule, _nonceRule, _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewDeploymentOrderEvent)
				if err := _Market.contract.UnpackLog(event, "NewDeploymentOrderEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDeploymentOrderEvent is a log parse operation binding the contract event 0xf4c3705c6e612c94165e537fa729b4c04ec7479c1ea185bd9f5ba2594e812b3f.
//
// Solidity: event NewDeploymentOrderEvent(address indexed _customer, uint256 indexed _nonce, uint256 indexed _deploymentOrderID, uint256 _faasLevelID, uint256 _highestUnitPrice, uint256 _faasDuration, uint256 _biddingDuration)
func (_Market *MarketFilterer) ParseNewDeploymentOrderEvent(log types.Log) (*MarketNewDeploymentOrderEvent, error) {
	event := new(MarketNewDeploymentOrderEvent)
	if err := _Market.contract.UnpackLog(event, "NewDeploymentOrderEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketNewLeaseEventIterator is returned from FilterNewLeaseEvent and is used to iterate over the raw logs and unpacked data for NewLeaseEvent events raised by the Market contract.
type MarketNewLeaseEventIterator struct {
	Event *MarketNewLeaseEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewLeaseEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewLeaseEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewLeaseEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewLeaseEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewLeaseEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewLeaseEvent represents a NewLeaseEvent event raised by the Market contract.
type MarketNewLeaseEvent struct {
	DeploymentOrderID *big.Int
	Customer          common.Address
	Provider          common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewLeaseEvent is a free log retrieval operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address indexed _customer, address indexed _provider)
func (_Market *MarketFilterer) FilterNewLeaseEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int, _customer []common.Address, _provider []common.Address) (*MarketNewLeaseEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _customerRule []interface{}
	for _, _customerItem := range _customer {
		_customerRule = append(_customerRule, _customerItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewLeaseEvent", _deploymentOrderIDRule, _customerRule, _providerRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewLeaseEventIterator{contract: _Market.contract, event: "NewLeaseEvent", logs: logs, sub: sub}, nil
}

// WatchNewLeaseEvent is a free log subscription operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address indexed _customer, address indexed _provider)
func (_Market *MarketFilterer) WatchNewLeaseEvent(opts *bind.WatchOpts, sink chan<- *MarketNewLeaseEvent, _deploymentOrderID []*big.Int, _customer []common.Address, _provider []common.Address) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}
	var _customerRule []interface{}
	for _, _customerItem := range _customer {
		_customerRule = append(_customerRule, _customerItem)
	}
	var _providerRule []interface{}
	for _, _providerItem := range _provider {
		_providerRule = append(_providerRule, _providerItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewLeaseEvent", _deploymentOrderIDRule, _customerRule, _providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewLeaseEvent)
				if err := _Market.contract.UnpackLog(event, "NewLeaseEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewLeaseEvent is a log parse operation binding the contract event 0xb7b56d611111b49690d934a0d72e2b472f4d78a8863f7da8c84e8381e894b2f8.
//
// Solidity: event NewLeaseEvent(uint256 indexed _deploymentOrderID, address indexed _customer, address indexed _provider)
func (_Market *MarketFilterer) ParseNewLeaseEvent(log types.Log) (*MarketNewLeaseEvent, error) {
	event := new(MarketNewLeaseEvent)
	if err := _Market.contract.UnpackLog(event, "NewLeaseEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketNewSLAEventIterator is returned from FilterNewSLAEvent and is used to iterate over the raw logs and unpacked data for NewSLAEvent events raised by the Market contract.
type MarketNewSLAEventIterator struct {
	Event *MarketNewSLAEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketNewSLAEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketNewSLAEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketNewSLAEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketNewSLAEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketNewSLAEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketNewSLAEvent represents a NewSLAEvent event raised by the Market contract.
type MarketNewSLAEvent struct {
	DeploymentOrderID *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterNewSLAEvent is a free log retrieval operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) FilterNewSLAEvent(opts *bind.FilterOpts, _deploymentOrderID []*big.Int) (*MarketNewSLAEventIterator, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "NewSLAEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return &MarketNewSLAEventIterator{contract: _Market.contract, event: "NewSLAEvent", logs: logs, sub: sub}, nil
}

// WatchNewSLAEvent is a free log subscription operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) WatchNewSLAEvent(opts *bind.WatchOpts, sink chan<- *MarketNewSLAEvent, _deploymentOrderID []*big.Int) (event.Subscription, error) {

	var _deploymentOrderIDRule []interface{}
	for _, _deploymentOrderIDItem := range _deploymentOrderID {
		_deploymentOrderIDRule = append(_deploymentOrderIDRule, _deploymentOrderIDItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "NewSLAEvent", _deploymentOrderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketNewSLAEvent)
				if err := _Market.contract.UnpackLog(event, "NewSLAEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSLAEvent is a log parse operation binding the contract event 0x8ae63663842e6ddde21aefbc18d970eaa43b1f6fb05295a4ec2a735287a0dd2a.
//
// Solidity: event NewSLAEvent(uint256 indexed _deploymentOrderID)
func (_Market *MarketFilterer) ParseNewSLAEvent(log types.Log) (*MarketNewSLAEvent, error) {
	event := new(MarketNewSLAEvent)
	if err := _Market.contract.UnpackLog(event, "NewSLAEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketAddFaaSLevelEventIterator is returned from FilterAddFaaSLevelEvent and is used to iterate over the raw logs and unpacked data for AddFaaSLevelEvent events raised by the Market contract.
type MarketAddFaaSLevelEventIterator struct {
	Event *MarketAddFaaSLevelEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketAddFaaSLevelEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketAddFaaSLevelEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketAddFaaSLevelEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketAddFaaSLevelEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketAddFaaSLevelEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketAddFaaSLevelEvent represents a AddFaaSLevelEvent event raised by the Market contract.
type MarketAddFaaSLevelEvent struct {
	Index *big.Int
	Core  *big.Int
	Mem   *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddFaaSLevelEvent is a free log retrieval operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed _index, uint256 _core, uint256 _mem)
func (_Market *MarketFilterer) FilterAddFaaSLevelEvent(opts *bind.FilterOpts, _index []*big.Int) (*MarketAddFaaSLevelEventIterator, error) {

	var _indexRule []interface{}
	for _, _indexItem := range _index {
		_indexRule = append(_indexRule, _indexItem)
	}

	logs, sub, err := _Market.contract.FilterLogs(opts, "addFaaSLevelEvent", _indexRule)
	if err != nil {
		return nil, err
	}
	return &MarketAddFaaSLevelEventIterator{contract: _Market.contract, event: "addFaaSLevelEvent", logs: logs, sub: sub}, nil
}

// WatchAddFaaSLevelEvent is a free log subscription operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed _index, uint256 _core, uint256 _mem)
func (_Market *MarketFilterer) WatchAddFaaSLevelEvent(opts *bind.WatchOpts, sink chan<- *MarketAddFaaSLevelEvent, _index []*big.Int) (event.Subscription, error) {

	var _indexRule []interface{}
	for _, _indexItem := range _index {
		_indexRule = append(_indexRule, _indexItem)
	}

	logs, sub, err := _Market.contract.WatchLogs(opts, "addFaaSLevelEvent", _indexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketAddFaaSLevelEvent)
				if err := _Market.contract.UnpackLog(event, "addFaaSLevelEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddFaaSLevelEvent is a log parse operation binding the contract event 0x901fa3fc598633460c6bb1e971f1a36b52ae0240ec8e04d15251e8f092cd7ec1.
//
// Solidity: event addFaaSLevelEvent(uint256 indexed _index, uint256 _core, uint256 _mem)
func (_Market *MarketFilterer) ParseAddFaaSLevelEvent(log types.Log) (*MarketAddFaaSLevelEvent, error) {
	event := new(MarketAddFaaSLevelEvent)
	if err := _Market.contract.UnpackLog(event, "addFaaSLevelEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
