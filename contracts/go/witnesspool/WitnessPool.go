// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package witnesspool

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	"github.com/FISCO-BCOS/go-sdk/event"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WitnessPoolABI is the input ABI used to generate the binding from.
const WitnessPoolABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"SLAContractGenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_forWhom\",\"type\":\"address\"}],\"name\":\"WitnessSelectedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"}],\"name\":\"checkWStates\",\"outputs\":[{\"internalType\":\"enumWitnessPool.WStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"confirm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genSLAContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlineCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"},{\"internalType\":\"int8\",\"name\":\"_value\",\"type\":\"int8\"}],\"name\":\"reputationDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_blkNeed\",\"type\":\"uint8\"}],\"name\":\"request\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_N\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"sortition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contractFaaSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SLAContract\",\"type\":\"address\"}],\"name\":\"validateSLA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"witnessAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// WitnessPoolBin is the compiled bytecode used for deploying new contracts.
var WitnessPoolBin = ""

// DeployWitnessPool deploys a new contract, binding an instance of WitnessPool to it.
func DeployWitnessPool(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenContractAddress common.Address) (common.Address, *types.Transaction, *WitnessPool, error) {
	parsed, err := abi.JSON(strings.NewReader(WitnessPoolABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WitnessPoolBin), backend, _tokenContractAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WitnessPool{WitnessPoolCaller: WitnessPoolCaller{contract: contract}, WitnessPoolTransactor: WitnessPoolTransactor{contract: contract}, WitnessPoolFilterer: WitnessPoolFilterer{contract: contract}}, nil
}

func AsyncDeployWitnessPool(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend, _tokenContractAddress common.Address) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(WitnessPoolABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(WitnessPoolBin), backend, _tokenContractAddress)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// WitnessPool is an auto generated Go binding around a Solidity contract.
type WitnessPool struct {
	WitnessPoolCaller     // Read-only binding to the contract
	WitnessPoolTransactor // Write-only binding to the contract
	WitnessPoolFilterer   // Log filterer for contract events
}

// WitnessPoolCaller is an auto generated read-only Go binding around a Solidity contract.
type WitnessPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WitnessPoolTransactor is an auto generated write-only Go binding around a Solidity contract.
type WitnessPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WitnessPoolFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type WitnessPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WitnessPoolSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type WitnessPoolSession struct {
	Contract     *WitnessPool      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WitnessPoolCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type WitnessPoolCallerSession struct {
	Contract *WitnessPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WitnessPoolTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type WitnessPoolTransactorSession struct {
	Contract     *WitnessPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WitnessPoolRaw is an auto generated low-level Go binding around a Solidity contract.
type WitnessPoolRaw struct {
	Contract *WitnessPool // Generic contract binding to access the raw methods on
}

// WitnessPoolCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type WitnessPoolCallerRaw struct {
	Contract *WitnessPoolCaller // Generic read-only contract binding to access the raw methods on
}

// WitnessPoolTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type WitnessPoolTransactorRaw struct {
	Contract *WitnessPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWitnessPool creates a new instance of WitnessPool, bound to a specific deployed contract.
func NewWitnessPool(address common.Address, backend bind.ContractBackend) (*WitnessPool, error) {
	contract, err := bindWitnessPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WitnessPool{WitnessPoolCaller: WitnessPoolCaller{contract: contract}, WitnessPoolTransactor: WitnessPoolTransactor{contract: contract}, WitnessPoolFilterer: WitnessPoolFilterer{contract: contract}}, nil
}

// NewWitnessPoolCaller creates a new read-only instance of WitnessPool, bound to a specific deployed contract.
func NewWitnessPoolCaller(address common.Address, caller bind.ContractCaller) (*WitnessPoolCaller, error) {
	contract, err := bindWitnessPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WitnessPoolCaller{contract: contract}, nil
}

// NewWitnessPoolTransactor creates a new write-only instance of WitnessPool, bound to a specific deployed contract.
func NewWitnessPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*WitnessPoolTransactor, error) {
	contract, err := bindWitnessPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WitnessPoolTransactor{contract: contract}, nil
}

// NewWitnessPoolFilterer creates a new log filterer instance of WitnessPool, bound to a specific deployed contract.
func NewWitnessPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*WitnessPoolFilterer, error) {
	contract, err := bindWitnessPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WitnessPoolFilterer{contract: contract}, nil
}

// bindWitnessPool binds a generic wrapper to an already deployed contract.
func bindWitnessPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WitnessPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WitnessPool *WitnessPoolRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WitnessPool.Contract.WitnessPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WitnessPool *WitnessPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.WitnessPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WitnessPool *WitnessPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.WitnessPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WitnessPool *WitnessPoolCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WitnessPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WitnessPool *WitnessPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WitnessPool *WitnessPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.contract.Transact(opts, method, params...)
}

// CheckWStates is a free data retrieval call binding the contract method 0xba984814.
//
// Solidity: function checkWStates(address _witness) constant returns(uint8, int8, uint256, address)
func (_WitnessPool *WitnessPoolCaller) CheckWStates(opts *bind.CallOpts, _witness common.Address) (uint8, int8, *big.Int, common.Address, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(int8)
		ret2 = new(*big.Int)
		ret3 = new(common.Address)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _WitnessPool.contract.Call(opts, out, "checkWStates", _witness)
	return *ret0, *ret1, *ret2, *ret3, err
}

// CheckWStates is a free data retrieval call binding the contract method 0xba984814.
//
// Solidity: function checkWStates(address _witness) constant returns(uint8, int8, uint256, address)
func (_WitnessPool *WitnessPoolSession) CheckWStates(_witness common.Address) (uint8, int8, *big.Int, common.Address, error) {
	return _WitnessPool.Contract.CheckWStates(&_WitnessPool.CallOpts, _witness)
}

// CheckWStates is a free data retrieval call binding the contract method 0xba984814.
//
// Solidity: function checkWStates(address _witness) constant returns(uint8, int8, uint256, address)
func (_WitnessPool *WitnessPoolCallerSession) CheckWStates(_witness common.Address) (uint8, int8, *big.Int, common.Address, error) {
	return _WitnessPool.Contract.CheckWStates(&_WitnessPool.CallOpts, _witness)
}

// OnlineCounter is a free data retrieval call binding the contract method 0x7121f961.
//
// Solidity: function onlineCounter() constant returns(uint256)
func (_WitnessPool *WitnessPoolCaller) OnlineCounter(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WitnessPool.contract.Call(opts, out, "onlineCounter")
	return *ret0, err
}

// OnlineCounter is a free data retrieval call binding the contract method 0x7121f961.
//
// Solidity: function onlineCounter() constant returns(uint256)
func (_WitnessPool *WitnessPoolSession) OnlineCounter() (*big.Int, error) {
	return _WitnessPool.Contract.OnlineCounter(&_WitnessPool.CallOpts)
}

// OnlineCounter is a free data retrieval call binding the contract method 0x7121f961.
//
// Solidity: function onlineCounter() constant returns(uint256)
func (_WitnessPool *WitnessPoolCallerSession) OnlineCounter() (*big.Int, error) {
	return _WitnessPool.Contract.OnlineCounter(&_WitnessPool.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_WitnessPool *WitnessPoolCaller) TokenContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WitnessPool.contract.Call(opts, out, "tokenContract")
	return *ret0, err
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_WitnessPool *WitnessPoolSession) TokenContract() (common.Address, error) {
	return _WitnessPool.Contract.TokenContract(&_WitnessPool.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() constant returns(address)
func (_WitnessPool *WitnessPoolCallerSession) TokenContract() (common.Address, error) {
	return _WitnessPool.Contract.TokenContract(&_WitnessPool.CallOpts)
}

// ValidateSLA is a free data retrieval call binding the contract method 0x27b7e2c0.
//
// Solidity: function validateSLA(address _SLAContract) constant returns(bool)
func (_WitnessPool *WitnessPoolCaller) ValidateSLA(opts *bind.CallOpts, _SLAContract common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _WitnessPool.contract.Call(opts, out, "validateSLA", _SLAContract)
	return *ret0, err
}

// ValidateSLA is a free data retrieval call binding the contract method 0x27b7e2c0.
//
// Solidity: function validateSLA(address _SLAContract) constant returns(bool)
func (_WitnessPool *WitnessPoolSession) ValidateSLA(_SLAContract common.Address) (bool, error) {
	return _WitnessPool.Contract.ValidateSLA(&_WitnessPool.CallOpts, _SLAContract)
}

// ValidateSLA is a free data retrieval call binding the contract method 0x27b7e2c0.
//
// Solidity: function validateSLA(address _SLAContract) constant returns(bool)
func (_WitnessPool *WitnessPoolCallerSession) ValidateSLA(_SLAContract common.Address) (bool, error) {
	return _WitnessPool.Contract.ValidateSLA(&_WitnessPool.CallOpts, _SLAContract)
}

// WitnessAddrs is a free data retrieval call binding the contract method 0x1bd84238.
//
// Solidity: function witnessAddrs(uint256 ) constant returns(address)
func (_WitnessPool *WitnessPoolCaller) WitnessAddrs(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WitnessPool.contract.Call(opts, out, "witnessAddrs", arg0)
	return *ret0, err
}

// WitnessAddrs is a free data retrieval call binding the contract method 0x1bd84238.
//
// Solidity: function witnessAddrs(uint256 ) constant returns(address)
func (_WitnessPool *WitnessPoolSession) WitnessAddrs(arg0 *big.Int) (common.Address, error) {
	return _WitnessPool.Contract.WitnessAddrs(&_WitnessPool.CallOpts, arg0)
}

// WitnessAddrs is a free data retrieval call binding the contract method 0x1bd84238.
//
// Solidity: function witnessAddrs(uint256 ) constant returns(address)
func (_WitnessPool *WitnessPoolCallerSession) WitnessAddrs(arg0 *big.Int) (common.Address, error) {
	return _WitnessPool.Contract.WitnessAddrs(&_WitnessPool.CallOpts, arg0)
}

// Confirm is a paid mutator transaction binding the contract method 0xeb4dd8f2.
//
// Solidity: function confirm(address _candidate) returns(bool)
func (_WitnessPool *WitnessPoolTransactor) Confirm(opts *bind.TransactOpts, _candidate common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "confirm", _candidate)
}

func (_WitnessPool *WitnessPoolTransactor) AsyncConfirm(handler func(*types.Receipt, error), opts *bind.TransactOpts, _candidate common.Address) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "confirm", _candidate)
}

// Confirm is a paid mutator transaction binding the contract method 0xeb4dd8f2.
//
// Solidity: function confirm(address _candidate) returns(bool)
func (_WitnessPool *WitnessPoolSession) Confirm(_candidate common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Confirm(&_WitnessPool.TransactOpts, _candidate)
}

func (_WitnessPool *WitnessPoolSession) AsyncConfirm(handler func(*types.Receipt, error), _candidate common.Address) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncConfirm(handler, &_WitnessPool.TransactOpts, _candidate)
}

// Confirm is a paid mutator transaction binding the contract method 0xeb4dd8f2.
//
// Solidity: function confirm(address _candidate) returns(bool)
func (_WitnessPool *WitnessPoolTransactorSession) Confirm(_candidate common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Confirm(&_WitnessPool.TransactOpts, _candidate)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncConfirm(handler func(*types.Receipt, error), _candidate common.Address) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncConfirm(handler, &_WitnessPool.TransactOpts, _candidate)
}

// GenSLAContract is a paid mutator transaction binding the contract method 0xc7dcf732.
//
// Solidity: function genSLAContract() returns(address)
func (_WitnessPool *WitnessPoolTransactor) GenSLAContract(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "genSLAContract")
}

func (_WitnessPool *WitnessPoolTransactor) AsyncGenSLAContract(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "genSLAContract")
}

// GenSLAContract is a paid mutator transaction binding the contract method 0xc7dcf732.
//
// Solidity: function genSLAContract() returns(address)
func (_WitnessPool *WitnessPoolSession) GenSLAContract() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.GenSLAContract(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolSession) AsyncGenSLAContract(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncGenSLAContract(handler, &_WitnessPool.TransactOpts)
}

// GenSLAContract is a paid mutator transaction binding the contract method 0xc7dcf732.
//
// Solidity: function genSLAContract() returns(address)
func (_WitnessPool *WitnessPoolTransactorSession) GenSLAContract() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.GenSLAContract(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncGenSLAContract(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncGenSLAContract(handler, &_WitnessPool.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x1aa3a008.
//
// Solidity: function register() returns()
func (_WitnessPool *WitnessPoolTransactor) Register(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "register")
}

func (_WitnessPool *WitnessPoolTransactor) AsyncRegister(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "register")
}

// Register is a paid mutator transaction binding the contract method 0x1aa3a008.
//
// Solidity: function register() returns()
func (_WitnessPool *WitnessPoolSession) Register() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Register(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolSession) AsyncRegister(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncRegister(handler, &_WitnessPool.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x1aa3a008.
//
// Solidity: function register() returns()
func (_WitnessPool *WitnessPoolTransactorSession) Register() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Register(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncRegister(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncRegister(handler, &_WitnessPool.TransactOpts)
}

// Reject is a paid mutator transaction binding the contract method 0x4dc415de.
//
// Solidity: function reject() returns()
func (_WitnessPool *WitnessPoolTransactor) Reject(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "reject")
}

func (_WitnessPool *WitnessPoolTransactor) AsyncReject(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "reject")
}

// Reject is a paid mutator transaction binding the contract method 0x4dc415de.
//
// Solidity: function reject() returns()
func (_WitnessPool *WitnessPoolSession) Reject() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Reject(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolSession) AsyncReject(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncReject(handler, &_WitnessPool.TransactOpts)
}

// Reject is a paid mutator transaction binding the contract method 0x4dc415de.
//
// Solidity: function reject() returns()
func (_WitnessPool *WitnessPoolTransactorSession) Reject() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Reject(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncReject(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncReject(handler, &_WitnessPool.TransactOpts)
}

// Release is a paid mutator transaction binding the contract method 0x19165587.
//
// Solidity: function release(address _witness) returns()
func (_WitnessPool *WitnessPoolTransactor) Release(opts *bind.TransactOpts, _witness common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "release", _witness)
}

func (_WitnessPool *WitnessPoolTransactor) AsyncRelease(handler func(*types.Receipt, error), opts *bind.TransactOpts, _witness common.Address) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "release", _witness)
}

// Release is a paid mutator transaction binding the contract method 0x19165587.
//
// Solidity: function release(address _witness) returns()
func (_WitnessPool *WitnessPoolSession) Release(_witness common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Release(&_WitnessPool.TransactOpts, _witness)
}

func (_WitnessPool *WitnessPoolSession) AsyncRelease(handler func(*types.Receipt, error), _witness common.Address) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncRelease(handler, &_WitnessPool.TransactOpts, _witness)
}

// Release is a paid mutator transaction binding the contract method 0x19165587.
//
// Solidity: function release(address _witness) returns()
func (_WitnessPool *WitnessPoolTransactorSession) Release(_witness common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Release(&_WitnessPool.TransactOpts, _witness)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncRelease(handler func(*types.Receipt, error), _witness common.Address) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncRelease(handler, &_WitnessPool.TransactOpts, _witness)
}

// ReputationDecrease is a paid mutator transaction binding the contract method 0x06491197.
//
// Solidity: function reputationDecrease(address _witness, int8 _value) returns()
func (_WitnessPool *WitnessPoolTransactor) ReputationDecrease(opts *bind.TransactOpts, _witness common.Address, _value int8) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "reputationDecrease", _witness, _value)
}

func (_WitnessPool *WitnessPoolTransactor) AsyncReputationDecrease(handler func(*types.Receipt, error), opts *bind.TransactOpts, _witness common.Address, _value int8) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "reputationDecrease", _witness, _value)
}

// ReputationDecrease is a paid mutator transaction binding the contract method 0x06491197.
//
// Solidity: function reputationDecrease(address _witness, int8 _value) returns()
func (_WitnessPool *WitnessPoolSession) ReputationDecrease(_witness common.Address, _value int8) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.ReputationDecrease(&_WitnessPool.TransactOpts, _witness, _value)
}

func (_WitnessPool *WitnessPoolSession) AsyncReputationDecrease(handler func(*types.Receipt, error), _witness common.Address, _value int8) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncReputationDecrease(handler, &_WitnessPool.TransactOpts, _witness, _value)
}

// ReputationDecrease is a paid mutator transaction binding the contract method 0x06491197.
//
// Solidity: function reputationDecrease(address _witness, int8 _value) returns()
func (_WitnessPool *WitnessPoolTransactorSession) ReputationDecrease(_witness common.Address, _value int8) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.ReputationDecrease(&_WitnessPool.TransactOpts, _witness, _value)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncReputationDecrease(handler func(*types.Receipt, error), _witness common.Address, _value int8) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncReputationDecrease(handler, &_WitnessPool.TransactOpts, _witness, _value)
}

// Request is a paid mutator transaction binding the contract method 0x748a309e.
//
// Solidity: function request(uint8 _blkNeed) returns(bool success)
func (_WitnessPool *WitnessPoolTransactor) Request(opts *bind.TransactOpts, _blkNeed uint8) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "request", _blkNeed)
}

func (_WitnessPool *WitnessPoolTransactor) AsyncRequest(handler func(*types.Receipt, error), opts *bind.TransactOpts, _blkNeed uint8) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "request", _blkNeed)
}

// Request is a paid mutator transaction binding the contract method 0x748a309e.
//
// Solidity: function request(uint8 _blkNeed) returns(bool success)
func (_WitnessPool *WitnessPoolSession) Request(_blkNeed uint8) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Request(&_WitnessPool.TransactOpts, _blkNeed)
}

func (_WitnessPool *WitnessPoolSession) AsyncRequest(handler func(*types.Receipt, error), _blkNeed uint8) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncRequest(handler, &_WitnessPool.TransactOpts, _blkNeed)
}

// Request is a paid mutator transaction binding the contract method 0x748a309e.
//
// Solidity: function request(uint8 _blkNeed) returns(bool success)
func (_WitnessPool *WitnessPoolTransactorSession) Request(_blkNeed uint8) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Request(&_WitnessPool.TransactOpts, _blkNeed)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncRequest(handler func(*types.Receipt, error), _blkNeed uint8) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncRequest(handler, &_WitnessPool.TransactOpts, _blkNeed)
}

// Reverse is a paid mutator transaction binding the contract method 0x92399c04.
//
// Solidity: function reverse() returns()
func (_WitnessPool *WitnessPoolTransactor) Reverse(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "reverse")
}

func (_WitnessPool *WitnessPoolTransactor) AsyncReverse(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "reverse")
}

// Reverse is a paid mutator transaction binding the contract method 0x92399c04.
//
// Solidity: function reverse() returns()
func (_WitnessPool *WitnessPoolSession) Reverse() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Reverse(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolSession) AsyncReverse(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncReverse(handler, &_WitnessPool.TransactOpts)
}

// Reverse is a paid mutator transaction binding the contract method 0x92399c04.
//
// Solidity: function reverse() returns()
func (_WitnessPool *WitnessPoolTransactorSession) Reverse() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Reverse(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncReverse(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncReverse(handler, &_WitnessPool.TransactOpts)
}

// Sortition is a paid mutator transaction binding the contract method 0xe421181a.
//
// Solidity: function sortition(uint256 _N, address _provider, address _customer) returns(bool success)
func (_WitnessPool *WitnessPoolTransactor) Sortition(opts *bind.TransactOpts, _N *big.Int, _provider common.Address, _customer common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "sortition", _N, _provider, _customer)
}

func (_WitnessPool *WitnessPoolTransactor) AsyncSortition(handler func(*types.Receipt, error), opts *bind.TransactOpts, _N *big.Int, _provider common.Address, _customer common.Address) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "sortition", _N, _provider, _customer)
}

// Sortition is a paid mutator transaction binding the contract method 0xe421181a.
//
// Solidity: function sortition(uint256 _N, address _provider, address _customer) returns(bool success)
func (_WitnessPool *WitnessPoolSession) Sortition(_N *big.Int, _provider common.Address, _customer common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Sortition(&_WitnessPool.TransactOpts, _N, _provider, _customer)
}

func (_WitnessPool *WitnessPoolSession) AsyncSortition(handler func(*types.Receipt, error), _N *big.Int, _provider common.Address, _customer common.Address) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncSortition(handler, &_WitnessPool.TransactOpts, _N, _provider, _customer)
}

// Sortition is a paid mutator transaction binding the contract method 0xe421181a.
//
// Solidity: function sortition(uint256 _N, address _provider, address _customer) returns(bool success)
func (_WitnessPool *WitnessPoolTransactorSession) Sortition(_N *big.Int, _provider common.Address, _customer common.Address) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.Sortition(&_WitnessPool.TransactOpts, _N, _provider, _customer)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncSortition(handler func(*types.Receipt, error), _N *big.Int, _provider common.Address, _customer common.Address) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncSortition(handler, &_WitnessPool.TransactOpts, _N, _provider, _customer)
}

// TurnOff is a paid mutator transaction binding the contract method 0xaf10c810.
//
// Solidity: function turnOff() returns()
func (_WitnessPool *WitnessPoolTransactor) TurnOff(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "turnOff")
}

func (_WitnessPool *WitnessPoolTransactor) AsyncTurnOff(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "turnOff")
}

// TurnOff is a paid mutator transaction binding the contract method 0xaf10c810.
//
// Solidity: function turnOff() returns()
func (_WitnessPool *WitnessPoolSession) TurnOff() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.TurnOff(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolSession) AsyncTurnOff(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncTurnOff(handler, &_WitnessPool.TransactOpts)
}

// TurnOff is a paid mutator transaction binding the contract method 0xaf10c810.
//
// Solidity: function turnOff() returns()
func (_WitnessPool *WitnessPoolTransactorSession) TurnOff() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.TurnOff(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncTurnOff(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncTurnOff(handler, &_WitnessPool.TransactOpts)
}

// TurnOn is a paid mutator transaction binding the contract method 0xba33ed7d.
//
// Solidity: function turnOn() returns()
func (_WitnessPool *WitnessPoolTransactor) TurnOn(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.contract.Transact(opts, "turnOn")
}

func (_WitnessPool *WitnessPoolTransactor) AsyncTurnOn(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WitnessPool.contract.AsyncTransact(opts, handler, "turnOn")
}

// TurnOn is a paid mutator transaction binding the contract method 0xba33ed7d.
//
// Solidity: function turnOn() returns()
func (_WitnessPool *WitnessPoolSession) TurnOn() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.TurnOn(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolSession) AsyncTurnOn(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncTurnOn(handler, &_WitnessPool.TransactOpts)
}

// TurnOn is a paid mutator transaction binding the contract method 0xba33ed7d.
//
// Solidity: function turnOn() returns()
func (_WitnessPool *WitnessPoolTransactorSession) TurnOn() (*types.Transaction, *types.Receipt, error) {
	return _WitnessPool.Contract.TurnOn(&_WitnessPool.TransactOpts)
}

func (_WitnessPool *WitnessPoolTransactorSession) AsyncTurnOn(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _WitnessPool.Contract.AsyncTurnOn(handler, &_WitnessPool.TransactOpts)
}

// WitnessPoolSLAContractGenEventIterator is returned from FilterSLAContractGenEvent and is used to iterate over the raw logs and unpacked data for SLAContractGenEvent events raised by the WitnessPool contract.
type WitnessPoolSLAContractGenEventIterator struct {
	Event *WitnessPoolSLAContractGenEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WitnessPoolSLAContractGenEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WitnessPoolSLAContractGenEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WitnessPoolSLAContractGenEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WitnessPoolSLAContractGenEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WitnessPoolSLAContractGenEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WitnessPoolSLAContractGenEvent represents a SLAContractGenEvent event raised by the WitnessPool contract.
type WitnessPoolSLAContractGenEvent struct {
	Who          common.Address
	Time         *big.Int
	ContractAddr common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSLAContractGenEvent is a free log retrieval operation binding the contract event 0xeda573667e3f4943fab93cfdf927cf80312b62d7ecc6020a7947b811e53c4dcb.
//
// Solidity: event SLAContractGenEvent(address indexed _who, uint256 _time, address _contractAddr)
func (_WitnessPool *WitnessPoolFilterer) FilterSLAContractGenEvent(opts *bind.FilterOpts, _who []common.Address) (*WitnessPoolSLAContractGenEventIterator, error) {

	var _whoRule []interface{}
	for _, _whoItem := range _who {
		_whoRule = append(_whoRule, _whoItem)
	}

	logs, sub, err := _WitnessPool.contract.FilterLogs(opts, "SLAContractGenEvent", _whoRule)
	if err != nil {
		return nil, err
	}
	return &WitnessPoolSLAContractGenEventIterator{contract: _WitnessPool.contract, event: "SLAContractGenEvent", logs: logs, sub: sub}, nil
}

// WatchSLAContractGenEvent is a free log subscription operation binding the contract event 0xeda573667e3f4943fab93cfdf927cf80312b62d7ecc6020a7947b811e53c4dcb.
//
// Solidity: event SLAContractGenEvent(address indexed _who, uint256 _time, address _contractAddr)
func (_WitnessPool *WitnessPoolFilterer) WatchSLAContractGenEvent(opts *bind.WatchOpts, sink chan<- *WitnessPoolSLAContractGenEvent, _who []common.Address) (event.Subscription, error) {

	var _whoRule []interface{}
	for _, _whoItem := range _who {
		_whoRule = append(_whoRule, _whoItem)
	}

	logs, sub, err := _WitnessPool.contract.WatchLogs(opts, "SLAContractGenEvent", _whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WitnessPoolSLAContractGenEvent)
				if err := _WitnessPool.contract.UnpackLog(event, "SLAContractGenEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSLAContractGenEvent is a log parse operation binding the contract event 0xeda573667e3f4943fab93cfdf927cf80312b62d7ecc6020a7947b811e53c4dcb.
//
// Solidity: event SLAContractGenEvent(address indexed _who, uint256 _time, address _contractAddr)
func (_WitnessPool *WitnessPoolFilterer) ParseSLAContractGenEvent(log types.Log) (*WitnessPoolSLAContractGenEvent, error) {
	event := new(WitnessPoolSLAContractGenEvent)
	if err := _WitnessPool.contract.UnpackLog(event, "SLAContractGenEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WitnessPoolWitnessSelectedEventIterator is returned from FilterWitnessSelectedEvent and is used to iterate over the raw logs and unpacked data for WitnessSelectedEvent events raised by the WitnessPool contract.
type WitnessPoolWitnessSelectedEventIterator struct {
	Event *WitnessPoolWitnessSelectedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WitnessPoolWitnessSelectedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WitnessPoolWitnessSelectedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WitnessPoolWitnessSelectedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WitnessPoolWitnessSelectedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WitnessPoolWitnessSelectedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WitnessPoolWitnessSelectedEvent represents a WitnessSelectedEvent event raised by the WitnessPool contract.
type WitnessPoolWitnessSelectedEvent struct {
	Who     common.Address
	Index   *big.Int
	ForWhom common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWitnessSelectedEvent is a free log retrieval operation binding the contract event 0xe842bbe5ce37ef4bb73eae729e42c75a83000823c25b0ca2a32410d5017f3dd8.
//
// Solidity: event WitnessSelectedEvent(address indexed _who, uint256 _index, address _forWhom)
func (_WitnessPool *WitnessPoolFilterer) FilterWitnessSelectedEvent(opts *bind.FilterOpts, _who []common.Address) (*WitnessPoolWitnessSelectedEventIterator, error) {

	var _whoRule []interface{}
	for _, _whoItem := range _who {
		_whoRule = append(_whoRule, _whoItem)
	}

	logs, sub, err := _WitnessPool.contract.FilterLogs(opts, "WitnessSelectedEvent", _whoRule)
	if err != nil {
		return nil, err
	}
	return &WitnessPoolWitnessSelectedEventIterator{contract: _WitnessPool.contract, event: "WitnessSelectedEvent", logs: logs, sub: sub}, nil
}

// WatchWitnessSelectedEvent is a free log subscription operation binding the contract event 0xe842bbe5ce37ef4bb73eae729e42c75a83000823c25b0ca2a32410d5017f3dd8.
//
// Solidity: event WitnessSelectedEvent(address indexed _who, uint256 _index, address _forWhom)
func (_WitnessPool *WitnessPoolFilterer) WatchWitnessSelectedEvent(opts *bind.WatchOpts, sink chan<- *WitnessPoolWitnessSelectedEvent, _who []common.Address) (event.Subscription, error) {

	var _whoRule []interface{}
	for _, _whoItem := range _who {
		_whoRule = append(_whoRule, _whoItem)
	}

	logs, sub, err := _WitnessPool.contract.WatchLogs(opts, "WitnessSelectedEvent", _whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WitnessPoolWitnessSelectedEvent)
				if err := _WitnessPool.contract.UnpackLog(event, "WitnessSelectedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWitnessSelectedEvent is a log parse operation binding the contract event 0xe842bbe5ce37ef4bb73eae729e42c75a83000823c25b0ca2a32410d5017f3dd8.
//
// Solidity: event WitnessSelectedEvent(address indexed _who, uint256 _index, address _forWhom)
func (_WitnessPool *WitnessPoolFilterer) ParseWitnessSelectedEvent(log types.Log) (*WitnessPoolWitnessSelectedEvent, error) {
	event := new(WitnessPoolWitnessSelectedEvent)
	if err := _WitnessPool.contract.UnpackLog(event, "WitnessSelectedEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}
